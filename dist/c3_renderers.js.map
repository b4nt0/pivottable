{"version":3,"names":[],"mappings":"","sources":["c3_renderers.js"],"sourcesContent":["/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nconst callWithJQuery = function(pivotModule) {\n    if ((typeof exports === \"object\") && (typeof module === \"object\")) { // CommonJS\n        return pivotModule(require(\"jquery\"), require(\"c3\"));\n    } else if ((typeof define === \"function\") && define.amd) { // AMD\n        return define([\"jquery\", \"c3\"], pivotModule);\n    // Plain browser env\n    } else {\n        return pivotModule(jQuery, c3);\n    }\n};\n\ncallWithJQuery(function($, c3) {\n\n    const makeC3Chart = function(chartOpts) { if (chartOpts == null) { chartOpts = {}; } return function(pivotData, opts) {\n        let colKey, columns, groupByTitle, hAxisTitle, rowKey, scatterData, series, titleText, vAxisTitle, y;\n        let c, x;\n        const defaults = {\n            localeStrings: {vs: \"vs\", by: \"by\"},\n            c3: {}\n        };\n\n        opts = $.extend(true, {}, defaults, opts);\n        if (opts.c3.size == null) { opts.c3.size = {}; }\n        if (opts.c3.size.width == null) { opts.c3.size.width = window.innerWidth / 1.4; }\n        if (opts.c3.size.height == null) { opts.c3.size.height = (window.innerHeight / 1.4) - 50; }\n        if (chartOpts.type == null) { chartOpts.type = \"line\"; }\n        if (chartOpts.horizontal == null) { chartOpts.horizontal = false; }\n        if (chartOpts.stacked == null) { chartOpts.stacked = false; }\n\n        const rowKeys = pivotData.getRowKeys();\n        if (rowKeys.length === 0) { rowKeys.push([]); }\n        const colKeys = pivotData.getColKeys();\n        if (colKeys.length === 0) { colKeys.push([]); }\n\n        let headers = (Array.from(colKeys).map((h) => h.join(\"-\")));\n        let rotationAngle = 0;\n\n        let fullAggName = pivotData.aggregatorName;\n        if (pivotData.valAttrs.length) {\n            fullAggName += `(${pivotData.valAttrs.join(\", \")})`;\n        }\n\n        if (chartOpts.type === \"scatter\") {\n            scatterData = {x:{}, y:{}, t:{}};\n            const attrs = pivotData.rowAttrs.concat(pivotData.colAttrs);\n            vAxisTitle = attrs[0] != null ? attrs[0] : \"\";\n            hAxisTitle = attrs[1] != null ? attrs[1] : \"\";\n            groupByTitle = attrs.slice(2).join(\"-\");\n            titleText = vAxisTitle;\n            if (hAxisTitle !== \"\") { titleText += ` ${opts.localeStrings.vs} ${hAxisTitle}`; }\n            if (groupByTitle !== \"\") { titleText += ` ${opts.localeStrings.by} ${groupByTitle}`; }\n            for (rowKey of Array.from(rowKeys)) {\n                for (colKey of Array.from(colKeys)) {\n                    const agg = pivotData.getAggregator(rowKey, colKey);\n                    if (agg.value() != null) {\n                        const vals = rowKey.concat(colKey);\n                        series = vals.slice(2).join(\"-\");\n                        if (series === \"\") { series = \"series\"; }\n                        if (scatterData.x[series] == null) { scatterData.x[series] = []; }\n                        if (scatterData.y[series] == null) { scatterData.y[series] = []; }\n                        y = vals[0] != null ? vals[0] : 0;\n                        x = vals[1] != null ? vals[1] : 0;\n                        scatterData.y[series].push(y);\n                        scatterData.x[series].push(x);\n                        if (scatterData.t[series] == null) { scatterData.t[series] = {}; }\n                        if (scatterData.t[series][x] == null) { scatterData.t[series][x] = {}; }\n                        scatterData.t[series][x][y] = agg.value();\n                    }\n                }\n            }\n        } else {\n            let numCharsInHAxis = 0;\n            for (x of Array.from(headers)) {\n                numCharsInHAxis += x.length;\n            }\n            if (numCharsInHAxis > 50) {\n                rotationAngle = 45;\n            }\n\n            columns = [];\n            for (rowKey of Array.from(rowKeys)) {\n                const rowHeader = rowKey.join(\"-\");\n                const row = [rowHeader === \"\" ? fullAggName : rowHeader];\n                for (colKey of Array.from(colKeys)) {\n                    const val = parseFloat(pivotData.getAggregator(rowKey, colKey).value());\n                    if (isFinite(val)) {\n                        row.push(val);\n                    } else {\n                        row.push(null);\n                    }\n                }\n                columns.push(row);\n            }\n\n            vAxisTitle = fullAggName;\n\n            if (chartOpts.horizontal) {\n                hAxisTitle = pivotData.rowAttrs.join(\"-\");\n                groupByTitle = pivotData.colAttrs.join(\"-\");\n            } else {\n                hAxisTitle = pivotData.colAttrs.join(\"-\");\n                groupByTitle = pivotData.rowAttrs.join(\"-\");\n            }\n            titleText = fullAggName;\n            if (hAxisTitle !== \"\") { titleText += ` ${opts.localeStrings.vs} ${hAxisTitle}`; }\n            if (groupByTitle !== \"\") { titleText += ` ${opts.localeStrings.by} ${groupByTitle}`; }\n        }\n\n        const title = $(\"<p>\", {style: \"text-align: center; font-weight: bold\"});\n        title.text(titleText);\n\n        const formatter = pivotData.getAggregator([], []).format;\n\n        let params = {\n            axis: {\n                rotated: chartOpts.horizontal,\n                y: {\n                    label: vAxisTitle,\n                    tick: {}\n                },\n                x: {\n                    label: hAxisTitle,\n                    tick: {\n                        rotate: rotationAngle,\n                        multiline: false\n                    }\n                }\n            },\n            data: {\n                type: chartOpts.type,\n                order: null\n            },\n            tooltip: {\n                grouped: false\n            },\n            color: {\n                pattern: [ \"#3366cc\", \"#dc3912\", \"#ff9900\", \"#109618\",\n                           \"#990099\", \"#0099c6\", \"#dd4477\", \"#66aa00\",\n                           \"#b82e2e\", \"#316395\", \"#994499\", \"#22aa99\",\n                           \"#aaaa11\", \"#6633cc\", \"#e67300\", \"#8b0707\",\n                           \"#651067\", \"#329262\", \"#5574a6\", \"#3b3eac\" ]\n            }\n        };\n\n\n        params = $.extend(true, {}, params, opts.c3);\n        if (chartOpts.type === \"scatter\") {\n            const xs = {};\n            let numSeries = 0;\n            const dataColumns = [];\n            for (let s in scatterData.x) {\n                numSeries += 1;\n                xs[s] = s+\"_x\";\n                dataColumns.push([s+\"_x\"].concat(scatterData.x[s]));\n                dataColumns.push([s].concat(scatterData.y[s]));\n            }\n            params.data.xs = xs;\n            params.data.columns = dataColumns;\n            params.axis.x.tick = {fit: false};\n            if (numSeries === 1) {\n                params.legend = {show: false};\n            }\n            params.tooltip.format = {\n                title() { return fullAggName; },\n                name() { return \"\"; },\n                value(a,b,c,d,e) {\n                    ({name: series, value: y, x} = e[0]);\n                    return formatter(scatterData.t[series][x][y]);\n                }\n            };\n        } else {\n            let categories;\n            params.axis.x.type= 'category';\n            if (params.axis.y.tick.format == null) { params.axis.y.tick.format = v => formatter(v); }\n            params.tooltip.format = {value(v) { return formatter(v); }};\n\n            if (chartOpts.horizontal) {\n                categories = ((() => {\n                    const result1 = [];\n                    for (c of Array.from(columns)) {                         result1.push(c.shift());\n                    }\n                    return result1;\n                })());\n                if ((categories.length === 1) && (categories[0] === fullAggName)) {\n                    categories = [\"\"];\n                }\n                params.axis.x.categories = categories;\n                if ((headers.length === 1) && (headers[0] === \"\")) {\n                    headers = [fullAggName];\n                }\n                columns.unshift(headers);\n                params.data.rows = columns;\n            } else {\n                params.axis.x.categories = headers;\n                params.data.columns = columns;\n            }\n        }\n\n\n        if (chartOpts.stacked) {\n            if (chartOpts.horizontal) {\n                params.data.groups = [(() => {\n                    const result2 = [];\n                    for (x of Array.from(colKeys)) {                         result2.push(x.join(\"-\"));\n                    }\n                    return result2;\n                })()];\n            } else {\n                params.data.groups = [(() => {\n                    const result3 = [];\n                    for (x of Array.from(rowKeys)) {                         result3.push(x.join(\"-\"));\n                    }\n                    return result3;\n                })()];\n            }\n        }\n\n        const renderArea = $(\"<div>\", {style: \"display:none;\"}).appendTo($(\"body\"));\n        const result = $(\"<div>\").appendTo(renderArea);\n        params.bindto = result[0];\n        c3.generate(params);\n        result.detach();\n        renderArea.remove();\n        return $(\"<div>\").append(title, result);\n    }; };\n\n    return $.pivotUtilities.c3_renderers = {\n        \"Horizontal Bar Chart\": makeC3Chart({type: \"bar\", horizontal: true}),\n        \"Horizontal Stacked Bar Chart\": makeC3Chart({type: \"bar\", stacked: true, horizontal: true}),\n        \"Bar Chart\": makeC3Chart({type: \"bar\"}),\n        \"Stacked Bar Chart\": makeC3Chart({type: \"bar\", stacked: true}),\n        \"Line Chart\": makeC3Chart(),\n        \"Area Chart\": makeC3Chart({type: \"area\", stacked: true}),\n        \"Scatter Chart\": makeC3Chart({type: \"scatter\"})\n    };\n});\n"],"file":"c3_renderers.js"}