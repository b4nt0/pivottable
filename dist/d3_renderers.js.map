{"version":3,"names":[],"mappings":"","sources":["d3_renderers.js"],"sourcesContent":["/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nconst callWithJQuery = function(pivotModule) {\n    if ((typeof exports === \"object\") && (typeof module === \"object\")) { // CommonJS\n        return pivotModule(require(\"jquery\"), require(\"d3\"));\n    } else if ((typeof define === \"function\") && define.amd) { // AMD\n        return define([\"jquery\", \"d3\"], pivotModule);\n    // Plain browser env\n    } else {\n        return pivotModule(jQuery, d3);\n    }\n};\n\ncallWithJQuery(($, d3) => $.pivotUtilities.d3_renderers = { Treemap(pivotData, opts) {\n    let value;\n    const defaults = {\n        localeStrings: {},\n        d3: {\n            width() { return $(window).width() / 1.4; },\n            height() { return $(window).height() / 1.4; }\n        }\n    };\n\n    opts = $.extend(true, {}, defaults, opts);\n\n\n    const result = $(\"<div>\").css({width: \"100%\", height: \"100%\"});\n\n    const tree = {name: \"All\", children: []};\n    var addToTree = function(tree, path, value) {\n        if (path.length === 0) {\n            tree.value = value;\n            return;\n        }\n        if (tree.children == null) { tree.children = []; }\n        const x = path.shift();\n        for (let child of Array.from(tree.children)) {\n            if (child.name === x) {\n                addToTree(child, path, value);\n                return;\n            }\n        }\n        const newChild = {name: x};\n        addToTree(newChild, path, value);\n        return tree.children.push(newChild);\n    };\n\n    for (let rowKey of Array.from(pivotData.getRowKeys())) {\n        value = pivotData.getAggregator(rowKey, []).value();\n        if (value != null) {\n            addToTree(tree, rowKey, value);\n        }\n    }\n\n    const color = d3.scale.category10();\n    const width = opts.d3.width();\n    const height = opts.d3.height();\n\n    const treemap = d3.layout.treemap()\n        .size([width, height])\n        .sticky(true)\n        .value( d => d.size);\n\n    d3.select(result[0])\n        .append(\"div\")\n            .style(\"position\", \"relative\")\n            .style(\"width\", width + \"px\")\n            .style(\"height\", height + \"px\")\n        .datum(tree).selectAll(\".node\")\n            .data(treemap.padding([15,0,0,0]).value( d => d.value).nodes)\n        .enter().append(\"div\")\n        .attr(\"class\", \"node\")\n        .style(\"background\", function(d) { if (d.children != null) { return \"lightgrey\"; } else { return color(d.name); }  })\n        .text( d => d.name)\n        .call(function() {\n                this.style(\"left\",  d => d.x+\"px\")\n                    .style(\"top\",   d => d.y+\"px\")\n                    .style(\"width\", d => Math.max(0, d.dx - 1)+\"px\")\n                    .style(\"height\",d => Math.max(0, d.dy - 1)+\"px\");\n    });\n\n    return result;\n}\n});\n\n\n\n"],"file":"d3_renderers.js"}