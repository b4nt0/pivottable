{"version":3,"names":[],"mappings":"","sources":["gchart_renderers.js"],"sourcesContent":["/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nconst callWithJQuery = function(pivotModule) {\n    if ((typeof exports === \"object\") && (typeof module === \"object\")) { // CommonJS\n        return pivotModule(require(\"jquery\"));\n    } else if ((typeof define === \"function\") && define.amd) { // AMD\n        return define([\"jquery\"], pivotModule);\n    // Plain browser env\n    } else {\n        return pivotModule(jQuery);\n    }\n};\n\ncallWithJQuery(function($) {\n\n    const makeGoogleChart = (chartType, extraOptions) => (function(pivotData, opts) {\n        let agg, dataArray, dataTable, hAxisTitle, title, vAxisTitle;\n        const defaults = {\n            localeStrings: {\n                vs: \"vs\",\n                by: \"by\"\n            },\n            gchart: {}\n        };\n\n        opts = $.extend(true, {}, defaults, opts);\n        if (opts.gchart.width == null) { opts.gchart.width = window.innerWidth / 1.4; }\n        if (opts.gchart.height == null) { opts.gchart.height = window.innerHeight / 1.4; }\n\n        const rowKeys = pivotData.getRowKeys();\n        if (rowKeys.length === 0) { rowKeys.push([]); }\n        const colKeys = pivotData.getColKeys();\n        if (colKeys.length === 0) { colKeys.push([]); }\n        let fullAggName = pivotData.aggregatorName;\n        if (pivotData.valAttrs.length) {\n            fullAggName += `(${pivotData.valAttrs.join(\", \")})`;\n        }\n        const headers = (Array.from(rowKeys).map((h) => h.join(\"-\")));\n        headers.unshift(\"\");\n\n        let numCharsInHAxis = 0;\n        if (chartType === \"ScatterChart\") {\n            dataArray = [];\n            for (let y in pivotData.tree) {\n                const tree2 = pivotData.tree[y];\n                for (let x in tree2) {\n                    agg = tree2[x];\n                     dataArray.push([\n                        parseFloat(x),\n                        parseFloat(y),\n                        fullAggName+\": \\n\"+agg.format(agg.value())\n                        ]);\n                }\n            }\n            dataTable = new google.visualization.DataTable();\n            dataTable.addColumn('number', pivotData.colAttrs.join(\"-\"));\n            dataTable.addColumn('number', pivotData.rowAttrs.join(\"-\"));\n            dataTable.addColumn({type: \"string\", role: \"tooltip\"});\n            dataTable.addRows(dataArray);\n            hAxisTitle = pivotData.colAttrs.join(\"-\");\n            vAxisTitle = pivotData.rowAttrs.join(\"-\");\n            title = \"\";\n        } else {\n            dataArray = [headers];\n            for (let colKey of Array.from(colKeys)) {\n                const row = [colKey.join(\"-\")];\n                numCharsInHAxis += row[0].length;\n                for (let rowKey of Array.from(rowKeys)) {\n                    agg = pivotData.getAggregator(rowKey, colKey);\n                    if (agg.value() != null) {\n                        const val = agg.value();\n                        if ($.isNumeric(val)) {\n                            if (val < 1) {\n                                row.push(parseFloat(val.toPrecision(3)));\n                            } else {\n                                row.push(parseFloat(val.toFixed(3)));\n                            }\n                        } else {\n                            row.push(val);\n                        }\n                    } else { row.push(null); }\n                }\n                dataArray.push(row);\n            }\n\n            dataTable = google.visualization.arrayToDataTable(dataArray);\n\n            title = (vAxisTitle = fullAggName);\n            hAxisTitle = pivotData.colAttrs.join(\"-\");\n            if (hAxisTitle !== \"\") { title += ` ${opts.localeStrings.vs} ${hAxisTitle}`; }\n            const groupByTitle = pivotData.rowAttrs.join(\"-\");\n            if (groupByTitle !== \"\") { title += ` ${opts.localeStrings.by} ${groupByTitle}`; }\n        }\n\n        let options = {\n            title,\n            hAxis: {title: hAxisTitle, slantedText: numCharsInHAxis > 50},\n            vAxis: {title: vAxisTitle},\n            tooltip: { textStyle: { fontName: 'Arial', fontSize: 12 } }\n        };\n\n        if (chartType === \"ColumnChart\") {\n            options.vAxis.minValue = 0;\n        }\n\n        if (chartType === \"ScatterChart\") {\n            options.legend = {position: \"none\"};\n            options.chartArea = {'width': '80%', 'height': '80%'};\n\n        } else if ((dataArray[0].length === 2) && (dataArray[0][1] ===  \"\")) {\n            options.legend = {position: \"none\"};\n        }\n\n        options = $.extend(true, {}, options, opts.gchart, extraOptions);\n\n        const result = $(\"<div>\").css({width: \"100%\", height: \"100%\"});\n        const wrapper = new google.visualization.ChartWrapper({dataTable, chartType, options});\n        wrapper.draw(result[0]);\n        result.bind(\"dblclick\", function() {\n            const editor = new google.visualization.ChartEditor();\n            google.visualization.events.addListener(editor, 'ok', () => editor.getChartWrapper().draw(result[0]));\n            return editor.openDialog(wrapper);\n        });\n        return result;\n    });\n\n    return $.pivotUtilities.gchart_renderers = {\n        \"Line Chart\": makeGoogleChart(\"LineChart\"),\n        \"Bar Chart\": makeGoogleChart(\"ColumnChart\"),\n        \"Stacked Bar Chart\": makeGoogleChart(\"ColumnChart\", {isStacked: true}),\n        \"Area Chart\": makeGoogleChart(\"AreaChart\", {isStacked: true}),\n        \"Scatter Chart\": makeGoogleChart(\"ScatterChart\")\n    };\n});\n"],"file":"gchart_renderers.js"}