{"version":3,"names":[],"mappings":"","sources":["pivot.js"],"sourcesContent":["/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS103: Rewrite code to no longer use __guard__, or convert again using --optional-chaining\n * DS104: Avoid inline assignments\n * DS201: Simplify complex destructure assignments\n * DS202: Simplify dynamic range loops\n * DS203: Remove `|| {}` from converted for-own loops\n * DS204: Change includes calls to have a more natural evaluation order\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nconst callWithJQuery = function(pivotModule) {\n    if ((typeof exports === \"object\") && (typeof module === \"object\")) { // CommonJS\n        return pivotModule(require(\"jquery\"));\n    } else if ((typeof define === \"function\") && define.amd) { // AMD\n        return define([\"jquery\"], pivotModule);\n    // Plain browser env\n    } else {\n        return pivotModule(jQuery);\n    }\n};\n\ncallWithJQuery(function($) {\n\n    /*\n    Utilities\n    */\n\n    const addSeparators = function(nStr, thousandsSep, decimalSep) {\n        nStr += '';\n        const x = nStr.split('.');\n        let x1 = x[0];\n        const x2 = x.length > 1 ?  decimalSep + x[1] : '';\n        const rgx = /(\\d+)(\\d{3})/;\n        while (rgx.test(x1)) { x1 = x1.replace(rgx, '$1' + thousandsSep + '$2'); }\n        return x1 + x2;\n    };\n\n    const numberFormat = function(opts) {\n        const defaults = {\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\",\n            prefix: \"\", suffix: \"\"\n        };\n        opts = $.extend({}, defaults, opts);\n        return function(x) {\n            if (isNaN(x) || !isFinite(x)) { return \"\"; }\n            const result = addSeparators((opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n            return \"\"+opts.prefix+result+opts.suffix;\n        };\n    };\n\n    //aggregator templates default to US number formatting but this is overrideable\n    const usFmt = numberFormat();\n    const usFmtInt = numberFormat({digitsAfterDecimal: 0});\n    const usFmtPct = numberFormat({digitsAfterDecimal:1, scaler: 100, suffix: \"%\"});\n\n    const aggregatorTemplates = {\n        count(formatter) { if (formatter == null) { formatter = usFmtInt; } return () => (function(data, rowKey, colKey) {\n            return {\n                count: 0,\n                push() { return this.count++; },\n                value() { return this.count; },\n                format: formatter\n            };\n        }); },\n\n        uniques(fn, formatter) { if (formatter == null) { formatter = usFmtInt; } return function(...args) { const [attr] = Array.from(args[0]); return function(data, rowKey, colKey) {\n            return {\n                uniq: [],\n                push(record) { if (!Array.from(this.uniq).includes(record[attr])) { return this.uniq.push(record[attr]); } },\n                value() { return fn(this.uniq); },\n                format: formatter,\n                numInputs: (attr != null) ? 0 : 1\n            };\n        }; }; },\n\n        sum(formatter) { if (formatter == null) { formatter = usFmt; } return function(...args) { const [attr] = Array.from(args[0]); return function(data, rowKey, colKey) {\n            return {\n                sum: 0,\n                push(record) { if (!isNaN(parseFloat(record[attr]))) { return this.sum += parseFloat(record[attr]); } },\n                value() { return this.sum; },\n                format: formatter,\n                numInputs: (attr != null) ? 0 : 1\n            };\n        }; }; },\n\n        extremes(mode, formatter) { if (formatter == null) { formatter = usFmt; } return function(...args) { const [attr] = Array.from(args[0]); return function(data, rowKey, colKey) {\n            return {\n                val: null,\n                sorter: getSort(data != null ? data.sorters : undefined, attr),\n                push(record) {\n                    let x = record[attr];\n                    if ([\"min\", \"max\"].includes(mode)) {\n                        x = parseFloat(x);\n                        if (!isNaN(x)) { this.val = Math[mode](x, this.val != null ? this.val : x); }\n                    }\n                    if (mode === \"first\") { if (this.sorter(x, this.val != null ? this.val : x) <= 0) { this.val = x; } }\n                    if (mode === \"last\") {  if (this.sorter(x, this.val != null ? this.val : x) >= 0) { return this.val = x; } }\n                },\n                value() { return this.val; },\n                format(x) { if (isNaN(x)) { return x; } else { return formatter(x); } },\n                numInputs: (attr != null) ? 0 : 1\n            };\n        }; }; },\n\n        quantile(q, formatter) { if (formatter == null) { formatter = usFmt; } return function(...args) { const [attr] = Array.from(args[0]); return function(data, rowKey, colKey) {\n            return {\n                vals: [],\n                push(record) {\n                    const x = parseFloat(record[attr]);\n                    if (!isNaN(x)) { return this.vals.push(x); }\n                },\n                value() {\n                    if (this.vals.length === 0) { return null; }\n                    this.vals.sort((a, b) => a-b);\n                    const i = (this.vals.length-1)*q;\n                    return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)])/2.0;\n                },\n                format: formatter,\n                numInputs: (attr != null) ? 0 : 1\n            };\n        }; }; },\n\n        runningStat(mode, ddof, formatter) { if (mode == null) { mode = \"mean\"; } if (ddof == null) { ddof = 1; } if (formatter == null) { formatter = usFmt; } return function(...args) { const [attr] = Array.from(args[0]); return function(data, rowKey, colKey) {\n            return {\n                n: 0.0, m: 0.0, s: 0.0,\n                push(record) {\n                    const x = parseFloat(record[attr]);\n                    if (isNaN(x)) { return; }\n                    this.n += 1.0;\n                    if (this.n === 1.0) {\n                        return this.m = x;\n                    } else {\n                        const m_new = this.m + ((x - this.m)/this.n);\n                        this.s = this.s + ((x - this.m)*(x - m_new));\n                        return this.m = m_new;\n                    }\n                },\n                value() {\n                    if (mode === \"mean\") {\n                        if (this.n === 0) { return 0/0; } else { return this.m; }\n                    }\n                    if (this.n <= ddof) { return 0; }\n                    switch (mode) {\n                        case \"var\":   return this.s/(this.n-ddof);\n                        case \"stdev\": return Math.sqrt(this.s/(this.n-ddof));\n                    }\n                },\n                format: formatter,\n                numInputs: (attr != null) ? 0 : 1\n            };\n        }; }; },\n\n        sumOverSum(formatter) { if (formatter == null) { formatter = usFmt; } return function(...args) { const [num, denom] = Array.from(args[0]); return function(data, rowKey, colKey) {\n            return {\n                sumNum: 0,\n                sumDenom: 0,\n                push(record) {\n                    if (!isNaN(parseFloat(record[num]))) { this.sumNum   += parseFloat(record[num]); }\n                    if (!isNaN(parseFloat(record[denom]))) { return this.sumDenom += parseFloat(record[denom]); }\n                },\n                value() { return this.sumNum/this.sumDenom; },\n                format: formatter,\n                numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n        }; }; },\n\n        sumOverSumBound80(upper, formatter) { if (upper == null) { upper = true; } if (formatter == null) { formatter = usFmt; } return function(...args) { const [num, denom] = Array.from(args[0]); return function(data, rowKey, colKey) {\n            return {\n                sumNum: 0,\n                sumDenom: 0,\n                push(record) {\n                    if (!isNaN(parseFloat(record[num]))) { this.sumNum   += parseFloat(record[num]); }\n                    if (!isNaN(parseFloat(record[denom]))) { return this.sumDenom += parseFloat(record[denom]); }\n                },\n                value() {\n                    const sign = upper ? 1 : -1;\n                    return ((0.821187207574908/this.sumDenom) + (this.sumNum/this.sumDenom) + (1.2815515655446004*sign*\n                        Math.sqrt((0.410593603787454/ (this.sumDenom*this.sumDenom)) + ((this.sumNum*(1 - (this.sumNum/ this.sumDenom)))/ (this.sumDenom*this.sumDenom)))))/\n                        (1 + (1.642374415149816/this.sumDenom));\n                },\n                format: formatter,\n                numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n        }; }; },\n\n        fractionOf(wrapped, type, formatter) { if (type == null) { type = \"total\"; } if (formatter == null) { formatter = usFmtPct; } return (...x) => (function(data, rowKey, colKey) {\n            return {\n                selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type],\n                inner: wrapped(...Array.from(x || []))(data, rowKey, colKey),\n                push(record) { return this.inner.push(record); },\n                format: formatter,\n                value() { return this.inner.value() / data.getAggregator(...Array.from(this.selector || [])).inner.value(); },\n                numInputs: wrapped(...Array.from(x || []))().numInputs\n            };\n        }); }\n    };\n\n    aggregatorTemplates.countUnique = f => aggregatorTemplates.uniques((x => x.length), f);\n    aggregatorTemplates.listUnique =  s => aggregatorTemplates.uniques((x => x.sort(naturalSort).join(s)), (x => x));\n    aggregatorTemplates.max =         f => aggregatorTemplates.extremes('max', f);\n    aggregatorTemplates.min =         f => aggregatorTemplates.extremes('min', f);\n    aggregatorTemplates.first =       f => aggregatorTemplates.extremes('first', f);\n    aggregatorTemplates.last =        f => aggregatorTemplates.extremes('last', f);\n    aggregatorTemplates.median =      f => aggregatorTemplates.quantile(0.5, f);\n    aggregatorTemplates.average =     f => aggregatorTemplates.runningStat(\"mean\", 1, f);\n    aggregatorTemplates.var =         (ddof, f) => aggregatorTemplates.runningStat(\"var\", ddof, f);\n    aggregatorTemplates.stdev =       (ddof, f) => aggregatorTemplates.runningStat(\"stdev\", ddof, f);\n\n    //default aggregators & renderers use US naming and number formatting\n    const aggregators = ((tpl => ({\n        \"Count\":                tpl.count(usFmtInt),\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt),\n        \"List Unique Values\":   tpl.listUnique(\", \"),\n        \"Sum\":                  tpl.sum(usFmt),\n        \"Integer Sum\":          tpl.sum(usFmtInt),\n        \"Average\":              tpl.average(usFmt),\n        \"Median\":               tpl.median(usFmt),\n        \"Sample Variance\":      tpl.var(1, usFmt),\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt),\n        \"Minimum\":              tpl.min(usFmt),\n        \"Maximum\":              tpl.max(usFmt),\n        \"First\":                tpl.first(usFmt),\n        \"Last\":                 tpl.last(usFmt),\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct),\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct),\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n    })))(aggregatorTemplates);\n\n    const renderers = {\n        \"Table\"(data, opts) {   return pivotTableRenderer(data, opts); },\n        \"Table Barchart\"(data, opts) { return $(pivotTableRenderer(data, opts)).barchart(); },\n        \"Heatmap\"(data, opts) { return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts); },\n        \"Row Heatmap\"(data, opts) { return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts); },\n        \"Col Heatmap\"(data, opts) { return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts); }\n    };\n\n    const locales = {\n        en: {\n            aggregators,\n            renderers,\n            localeStrings: {\n                renderError: \"An error occurred rendering the PivotTable results.\",\n                computeError: \"An error occurred computing the PivotTable results.\",\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n                selectAll: \"Select All\",\n                selectNone: \"Select None\",\n                tooMany: \"(too many to list)\",\n                filterResults: \"Filter values\",\n                apply: \"Apply\",\n                cancel: \"Cancel\",\n                totals: \"Totals\", //for table renderer\n                vs: \"vs\", //for gchart renderer\n                by: \"by\"\n            }\n        } //for gchart renderer\n    };\n\n    //dateFormat deriver l10n requires month and day names to be passed in directly\n    const mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\n    const dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"];\n    const zeroPad = number => (\"0\"+number).substr(-2,2);\n\n    const derivers = {\n        bin(col, binWidth) { return record => record[col] - (record[col] % binWidth); },\n        dateFormat(col, formatString, utcOutput, mthNames, dayNames) {\n            if (utcOutput == null) { utcOutput = false; }\n            if (mthNames == null) { mthNames = mthNamesEn; }\n            if (dayNames == null) { dayNames = dayNamesEn; }\n            const utc = utcOutput ? \"UTC\" : \"\";\n            return function(record) { //thanks http://stackoverflow.com/a/12213072/112871\n                const date = new Date(Date.parse(record[col]));\n                if (isNaN(date)) { return \"\"; }\n                return formatString.replace(/%(.)/g, function(m, p) {\n                    switch (p) {\n                        case \"y\": return date[`get${utc}FullYear`]();\n                        case \"m\": return zeroPad(date[`get${utc}Month`]()+1);\n                        case \"n\": return mthNames[date[`get${utc}Month`]()];\n                        case \"d\": return zeroPad(date[`get${utc}Date`]());\n                        case \"w\": return dayNames[date[`get${utc}Day`]()];\n                        case \"x\": return date[`get${utc}Day`]();\n                        case \"H\": return zeroPad(date[`get${utc}Hours`]());\n                        case \"M\": return zeroPad(date[`get${utc}Minutes`]());\n                        case \"S\": return zeroPad(date[`get${utc}Seconds`]());\n                        default: return \"%\" + p;\n                    }\n                });\n            };\n        }\n    };\n\n    const rx = /(\\d+)|(\\D+)/g;\n    const rd = /\\d/;\n    const rz = /^0/;\n    var naturalSort = (as, bs) => {\n        //nulls first\n        if ((bs != null) && (as == null)) { return -1; }\n        if ((as != null) && (bs == null)) { return  1; }\n\n        //then raw NaNs\n        if ((typeof as === \"number\") && isNaN(as)) { return -1; }\n        if ((typeof bs === \"number\") && isNaN(bs)) { return  1; }\n\n        //numbers and numbery strings group together\n        const nas = +as;\n        const nbs = +bs;\n        if (nas < nbs) { return -1; }\n        if (nas > nbs) { return  1; }\n\n        //within that, true numbers before numbery strings\n        if ((typeof as === \"number\") && (typeof bs !== \"number\")) { return -1; }\n        if ((typeof bs === \"number\") && (typeof as !== \"number\")) { return  1; }\n        if ((typeof as === \"number\") && (typeof bs === \"number\")) { return  0; }\n\n        // 'Infinity' is a textual number, so less than 'A'\n        if (isNaN(nbs) && !isNaN(nas)) { return -1; }\n        if (isNaN(nas) && !isNaN(nbs)) { return  1; }\n\n        //finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n        let a = String(as);\n        let b = String(bs);\n        if (a === b) { return 0; }\n        if (!rd.test(a) || !rd.test(b)) { return (a > b ? 1 : -1); }\n\n        //special treatment for strings containing digits\n        a = a.match(rx); //create digits vs non-digit chunks and iterate through\n        b = b.match(rx);\n        while (a.length && b.length) {\n            const a1 = a.shift();\n            const b1 = b.shift();\n            if (a1 !== b1) {\n                if (rd.test(a1) && rd.test(b1)) { //both are digit chunks\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n                } else {\n                    return (a1 > b1 ? 1 : -1);\n                }\n            }\n        }\n        return a.length - b.length;\n    };\n\n    const sortAs = function(order) {\n        const mapping = {};\n        const l_mapping = {}; // sort lowercased keys similarly\n        for (let i in order) {\n            const x = order[i];\n            mapping[x] = i;\n            if (typeof x === \"string\") { l_mapping[x.toLowerCase()] = i; }\n        }\n        return function(a, b) {\n            if ((mapping[a] != null) && (mapping[b] != null)) { return mapping[a] - mapping[b];\n            } else if (mapping[a] != null) { return -1;\n            } else if (mapping[b] != null) { return 1;\n            } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) { return l_mapping[a] - l_mapping[b];\n            } else if (l_mapping[a] != null) { return -1;\n            } else if (l_mapping[b] != null) { return 1;\n            } else { return naturalSort(a,b); }\n        };\n    };\n\n    var getSort = function(sorters, attr) {\n        if (sorters != null) {\n            if ($.isFunction(sorters)) {\n                const sort = sorters(attr);\n                if ($.isFunction(sort)) { return sort; }\n            } else if (sorters[attr] != null) {\n                return sorters[attr];\n            }\n        }\n        return naturalSort;\n    };\n\n    /*\n    Data Model class\n    */\n\n    class PivotData {\n        constructor(input, opts) {\n            this.arrSort = this.arrSort.bind(this);\n            this.sortKeys = this.sortKeys.bind(this);\n            this.getColKeys = this.getColKeys.bind(this);\n            this.getRowKeys = this.getRowKeys.bind(this);\n            this.getAggregator = this.getAggregator.bind(this);\n            if (opts == null) { opts = {}; }\n            this.input = input;\n            this.aggregator = opts.aggregator != null ? opts.aggregator : aggregatorTemplates.count()();\n            this.aggregatorName = opts.aggregatorName != null ? opts.aggregatorName : \"Count\";\n            this.colAttrs = opts.cols != null ? opts.cols : [];\n            this.rowAttrs = opts.rows != null ? opts.rows : [];\n            this.valAttrs = opts.vals != null ? opts.vals : [];\n            this.sorters = opts.sorters != null ? opts.sorters : {};\n            this.rowOrder = opts.rowOrder != null ? opts.rowOrder : \"key_a_to_z\";\n            this.colOrder = opts.colOrder != null ? opts.colOrder : \"key_a_to_z\";\n            this.derivedAttributes = opts.derivedAttributes != null ? opts.derivedAttributes : {};\n            this.filter = opts.filter != null ? opts.filter : (() => true);\n            this.tree = {};\n            this.rowKeys = [];\n            this.colKeys = [];\n            this.rowTotals = {};\n            this.colTotals = {};\n            this.allTotal = this.aggregator(this, [], []);\n            this.sorted = false;\n\n            // iterate through input, accumulating data for cells\n            PivotData.forEachRecord(this.input, this.derivedAttributes, record => {\n                if (this.filter(record)) { return this.processRecord(record); }\n            });\n        }\n\n        //can handle arrays or jQuery selections of tables\n        static forEachRecord(input, derivedAttributes, f) {\n            let addRecord;\n            if ($.isEmptyObject(derivedAttributes)) {\n                addRecord = f;\n            } else {\n                addRecord = function(record) {\n                    for (let k in derivedAttributes) { var left;\n                    const v = derivedAttributes[k]; record[k] = (left = v(record)) != null ? left : record[k]; }\n                    return f(record);\n                };\n            }\n\n            //if it's a function, have it call us back\n            if ($.isFunction(input)) {\n                return input(addRecord);\n            } else if ($.isArray(input)) {\n                if ($.isArray(input[0])) { //array of arrays\n                    return (() => {\n                        const result = [];\n                        for (let i of Object.keys(input || {})) {\n                            const compactRecord = input[i];\n                            if (i > 0) {\n                                const record = {};\n                                for (let j of Object.keys(input[0] || {})) { const k = input[0][j]; record[k] = compactRecord[j]; }\n                                result.push(addRecord(record));\n                            }\n                        }\n                        return result;\n                    })();\n                } else { //array of objects\n                    return (() => {\n                        const result1 = [];\n                        for (let record of Array.from(input)) {                             result1.push(addRecord(record));\n                        }\n                        return result1;\n                    })();\n                }\n            } else if (input instanceof $) {\n                const tblCols = [];\n                $(\"thead > tr > th\", input).each(function(i) { return tblCols.push($(this).text()); });\n                return $(\"tbody > tr\", input).each(function(i) {\n                    const record = {};\n                    $(\"td\", this).each(function(j) { return record[tblCols[j]] = $(this).text(); });\n                    return addRecord(record);\n                });\n            } else {\n                throw new Error(\"unknown input format\");\n            }\n        }\n\n        forEachMatchingRecord(criteria, callback) {\n            return PivotData.forEachRecord(this.input, this.derivedAttributes, record => {\n                if (!this.filter(record)) { return; }\n                for (let k in criteria) {\n                    const v = criteria[k];\n                    if (v !== (record[k] != null ? record[k] : \"null\")) { return; }\n                }\n                return callback(record);\n            });\n        }\n\n        arrSort(attrs) {\n            let a;\n            const sortersArr = ((() => {\n                const result = [];\n                for (a of Array.from(attrs)) {                     result.push(getSort(this.sorters, a));\n                }\n                return result;\n            })());\n            return function(a,b) {\n                for (let i of Object.keys(sortersArr || {})) {\n                    const sorter = sortersArr[i];\n                    const comparison = sorter(a[i], b[i]);\n                    if (comparison !== 0) { return comparison; }\n                }\n                return 0;\n            };\n        }\n\n        sortKeys() {\n            if (!this.sorted) {\n                this.sorted = true;\n                const v = (r,c) => this.getAggregator(r,c).value();\n                switch (this.rowOrder) {\n                    case \"value_a_to_z\":  this.rowKeys.sort((a,b) =>  naturalSort(v(a,[]), v(b,[]))); break;\n                    case \"value_z_to_a\": this.rowKeys.sort((a,b) => -naturalSort(v(a,[]), v(b,[]))); break;\n                    default:             this.rowKeys.sort(this.arrSort(this.rowAttrs));\n                }\n                switch (this.colOrder) {\n                    case \"value_a_to_z\":  return this.colKeys.sort((a,b) =>  naturalSort(v([],a), v([],b)));\n                    case \"value_z_to_a\": return this.colKeys.sort((a,b) => -naturalSort(v([],a), v([],b)));\n                    default:             return this.colKeys.sort(this.arrSort(this.colAttrs));\n                }\n            }\n        }\n\n        getColKeys() {\n            this.sortKeys();\n            return this.colKeys;\n        }\n\n        getRowKeys() {\n            this.sortKeys();\n            return this.rowKeys;\n        }\n\n        processRecord(record) { //this code is called in a tight loop\n            let x;\n            const colKey = [];\n            const rowKey = [];\n            for (x of Array.from(this.colAttrs)) { colKey.push(record[x] != null ? record[x] : \"null\"); }\n            for (x of Array.from(this.rowAttrs)) { rowKey.push(record[x] != null ? record[x] : \"null\"); }\n            const flatRowKey = rowKey.join(String.fromCharCode(0));\n            const flatColKey = colKey.join(String.fromCharCode(0));\n\n            this.allTotal.push(record);\n\n            if (rowKey.length !== 0) {\n                if (!this.rowTotals[flatRowKey]) {\n                    this.rowKeys.push(rowKey);\n                    this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n                }\n                this.rowTotals[flatRowKey].push(record);\n            }\n\n            if (colKey.length !== 0) {\n                if (!this.colTotals[flatColKey]) {\n                    this.colKeys.push(colKey);\n                    this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n                }\n                this.colTotals[flatColKey].push(record);\n            }\n\n            if ((colKey.length !== 0) && (rowKey.length !== 0)) {\n                if (!this.tree[flatRowKey]) {\n                    this.tree[flatRowKey] = {};\n                }\n                if (!this.tree[flatRowKey][flatColKey]) {\n                    this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n                }\n                return this.tree[flatRowKey][flatColKey].push(record);\n            }\n        }\n\n        getAggregator(rowKey, colKey) {\n            let agg;\n            const flatRowKey = rowKey.join(String.fromCharCode(0));\n            const flatColKey = colKey.join(String.fromCharCode(0));\n            if ((rowKey.length === 0) && (colKey.length === 0)) {\n                agg = this.allTotal;\n            } else if (rowKey.length === 0) {\n                agg = this.colTotals[flatColKey];\n            } else if (colKey.length === 0) {\n                agg = this.rowTotals[flatRowKey];\n            } else {\n                agg = this.tree[flatRowKey][flatColKey];\n            }\n            return agg != null ? agg : {value() { return null; }, format() { return \"\"; }};\n        }\n    }\n\n    //expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData};\n\n    /*\n    Default Renderer for hierarchical table layout\n    */\n\n    var pivotTableRenderer = function(pivotData, opts) {\n\n        let colKey, getClickHandler, i, j, td, th, totalAggregator, tr, val, x;\n        const defaults = {\n            table: {\n                clickCallback: null,\n                rowTotals: true,\n                colTotals: true\n            },\n            localeStrings: { totals: \"Totals\"\n        }\n        };\n\n        opts = $.extend(true, {}, defaults, opts);\n\n        const {\n            colAttrs\n        } = pivotData;\n        const {\n            rowAttrs\n        } = pivotData;\n        const rowKeys = pivotData.getRowKeys();\n        const colKeys = pivotData.getColKeys();\n\n        if (opts.table.clickCallback) {\n            getClickHandler = function(value, rowValues, colValues) {\n                let attr, i;\n                const filters = {};\n                for (i of Object.keys(colAttrs || {})) { attr = colAttrs[i]; if (colValues[i] != null) { filters[attr] = colValues[i]; } }\n                for (i of Object.keys(rowAttrs || {})) { attr = rowAttrs[i]; if (rowValues[i] != null) { filters[attr] = rowValues[i]; } }\n                return e => opts.table.clickCallback(e, value, filters, pivotData);\n            };\n        }\n\n        //now actually build the output\n        const result = document.createElement(\"table\");\n        result.className = \"pvtTable\";\n\n        //helper function for setting row/col-span in pivotTableRenderer\n        const spanSize = function(arr, i, j) {\n            let x;\n            if (i !== 0) {\n                let asc, end;\n                let noDraw = true;\n                for (x = 0, end = j, asc = 0 <= end; asc ? x <= end : x >= end; asc ? x++ : x--) {\n                    if (arr[i-1][x] !== arr[i][x]) {\n                        noDraw = false;\n                    }\n                }\n                if (noDraw) {\n                  return -1; //do not draw cell\n              }\n            }\n            let len = 0;\n            while ((i+len) < arr.length) {\n                var asc1, end1;\n                let stop = false;\n                for (x = 0, end1 = j, asc1 = 0 <= end1; asc1 ? x <= end1 : x >= end1; asc1 ? x++ : x--) {\n                    if (arr[i][x] !== arr[i+len][x]) { stop = true; }\n                }\n                if (stop) { break; }\n                len++;\n            }\n            return len;\n        };\n\n        //the first few rows are for col headers\n        const thead = document.createElement(\"thead\");\n        for (j of Object.keys(colAttrs || {})) {\n            const c = colAttrs[j];\n            tr = document.createElement(\"tr\");\n            if ((parseInt(j) === 0) && (rowAttrs.length !== 0)) {\n                th = document.createElement(\"th\");\n                th.setAttribute(\"colspan\", rowAttrs.length);\n                th.setAttribute(\"rowspan\", colAttrs.length);\n                tr.appendChild(th);\n            }\n            th = document.createElement(\"th\");\n            th.className = \"pvtAxisLabel\";\n            th.textContent = c;\n            tr.appendChild(th);\n            for (i of Object.keys(colKeys || {})) {\n                colKey = colKeys[i];\n                x = spanSize(colKeys, parseInt(i), parseInt(j));\n                if (x !== -1) {\n                    th = document.createElement(\"th\");\n                    th.className = \"pvtColLabel\";\n                    th.textContent = colKey[j];\n                    th.setAttribute(\"colspan\", x);\n                    if ((parseInt(j) === (colAttrs.length-1)) && (rowAttrs.length !== 0)) {\n                        th.setAttribute(\"rowspan\", 2);\n                    }\n                    tr.appendChild(th);\n                }\n            }\n            if ((parseInt(j) === 0) && opts.table.rowTotals) {\n                th = document.createElement(\"th\");\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n                th.innerHTML = opts.localeStrings.totals;\n                th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length ===0 ? 0 : 1));\n                tr.appendChild(th);\n            }\n            thead.appendChild(tr);\n        }\n\n        //then a row for row header headers\n        if (rowAttrs.length !==0) {\n            tr = document.createElement(\"tr\");\n            for (i of Object.keys(rowAttrs || {})) {\n                const r = rowAttrs[i];\n                th = document.createElement(\"th\");\n                th.className = \"pvtAxisLabel\";\n                th.textContent = r;\n                tr.appendChild(th);\n            }\n            th = document.createElement(\"th\");\n            if (colAttrs.length ===0) {\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n                th.innerHTML = opts.localeStrings.totals;\n            }\n            tr.appendChild(th);\n            thead.appendChild(tr);\n        }\n        result.appendChild(thead);\n\n        //now the actual data rows, with their row headers and totals\n        const tbody = document.createElement(\"tbody\");\n        for (i of Object.keys(rowKeys || {})) {\n            const rowKey = rowKeys[i];\n            tr = document.createElement(\"tr\");\n            for (j of Object.keys(rowKey || {})) {\n                const txt = rowKey[j];\n                x = spanSize(rowKeys, parseInt(i), parseInt(j));\n                if (x !== -1) {\n                    th = document.createElement(\"th\");\n                    th.className = \"pvtRowLabel\";\n                    th.textContent = txt;\n                    th.setAttribute(\"rowspan\", x);\n                    if ((parseInt(j) === (rowAttrs.length-1)) && (colAttrs.length !==0)) {\n                        th.setAttribute(\"colspan\",2);\n                    }\n                    tr.appendChild(th);\n                }\n            }\n            for (j of Object.keys(colKeys || {})) { //this is the tight loop\n                colKey = colKeys[j];\n                const aggregator = pivotData.getAggregator(rowKey, colKey);\n                val = aggregator.value();\n                td = document.createElement(\"td\");\n                td.className = `pvtVal row${i} col${j}`;\n                td.textContent = aggregator.format(val);\n                td.setAttribute(\"data-value\", val);\n                if (getClickHandler != null) {\n                    td.onclick = getClickHandler(val, rowKey, colKey);\n                }\n                tr.appendChild(td);\n            }\n\n            if (opts.table.rowTotals || (colAttrs.length === 0)) {\n                totalAggregator = pivotData.getAggregator(rowKey, []);\n                val = totalAggregator.value();\n                td = document.createElement(\"td\");\n                td.className = \"pvtTotal rowTotal\";\n                td.textContent = totalAggregator.format(val);\n                td.setAttribute(\"data-value\", val);\n                if (getClickHandler != null) {\n                    td.onclick = getClickHandler(val, rowKey, []);\n                }\n                td.setAttribute(\"data-for\", \"row\"+i);\n                tr.appendChild(td);\n            }\n            tbody.appendChild(tr);\n        }\n\n        //finally, the row for col totals, and a grand total\n        if (opts.table.colTotals || (rowAttrs.length === 0)) {\n            tr = document.createElement(\"tr\");\n            if (opts.table.colTotals || (rowAttrs.length === 0)) {\n                th = document.createElement(\"th\");\n                th.className = \"pvtTotalLabel pvtColTotalLabel\";\n                th.innerHTML = opts.localeStrings.totals;\n                th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n                tr.appendChild(th);\n            }\n            for (j of Object.keys(colKeys || {})) {\n                colKey = colKeys[j];\n                totalAggregator = pivotData.getAggregator([], colKey);\n                val = totalAggregator.value();\n                td = document.createElement(\"td\");\n                td.className = \"pvtTotal colTotal\";\n                td.textContent = totalAggregator.format(val);\n                td.setAttribute(\"data-value\", val);\n                if (getClickHandler != null) {\n                    td.onclick = getClickHandler(val, [], colKey);\n                }\n                td.setAttribute(\"data-for\", \"col\"+j);\n                tr.appendChild(td);\n            }\n            if (opts.table.rowTotals || (colAttrs.length === 0)) {\n                totalAggregator = pivotData.getAggregator([], []);\n                val = totalAggregator.value();\n                td = document.createElement(\"td\");\n                td.className = \"pvtGrandTotal\";\n                td.textContent = totalAggregator.format(val);\n                td.setAttribute(\"data-value\", val);\n                if (getClickHandler != null) {\n                    td.onclick = getClickHandler(val, [], []);\n                }\n                tr.appendChild(td);\n            }\n            tbody.appendChild(tr);\n        }\n        result.appendChild(tbody);\n\n        //squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length);\n        result.setAttribute(\"data-numcols\", colKeys.length);\n\n        return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n    */\n\n    $.fn.pivot = function(input, inputOpts, locale) {\n        let e;\n        if (locale == null) { locale = \"en\"; }\n        if ((locales[locale] == null)) { locale = \"en\"; }\n        const defaults = {\n            cols : [], rows: [], vals: [],\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\",\n            dataClass: PivotData,\n            filter() { return true; },\n            aggregator: aggregatorTemplates.count()(),\n            aggregatorName: \"Count\",\n            sorters: {},\n            derivedAttributes: {},\n            renderer: pivotTableRenderer,\n            updateDataCallback: null\n        };\n\n        const localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n        const localeDefaults = {\n            rendererOptions: {localeStrings},\n            localeStrings\n        };\n\n        const opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n\n        let result = null;\n        try {\n            const pivotData = new opts.dataClass(input, opts);\n            try {\n                result = opts.renderer(pivotData, opts.rendererOptions);\n            } catch (error) {\n                e = error;\n                if (typeof console !== 'undefined' && console !== null) { console.error(e.stack); }\n                result = $(\"<span>\").html(opts.localeStrings.renderError);\n            }\n        } catch (error1) {\n            e = error1;\n            if (typeof console !== 'undefined' && console !== null) { console.error(e.stack); }\n            result = $(\"<span>\").html(opts.localeStrings.computeError);\n        }\n\n        const x = this[0];\n        while (x.hasChildNodes()) { x.removeChild(x.lastChild); }\n        return this.append(result);\n    };\n\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    */\n\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n        let opts;\n        let a, c;\n        if (overwrite == null) { overwrite = false; }\n        if (locale == null) { locale = \"en\"; }\n        if ((locales[locale] == null)) { locale = \"en\"; }\n        const defaults = {\n            derivedAttributes: {},\n            aggregators: locales[locale].aggregators,\n            renderers: locales[locale].renderers,\n            hiddenAttributes: [],\n            hiddenFromAggregators: [],\n            hiddenFromDragDrop: [],\n            menuLimit: 500,\n            cols: [], rows: [], vals: [],\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\",\n            dataClass: PivotData,\n            exclusions: {},\n            inclusions: {},\n            unusedAttrsVertical: 85,\n            autoSortUnusedAttrs: false,\n            onRefresh: null,\n            showUI: true,\n            filter() { return true; },\n            sorters: {}\n        };\n\n        const localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n        const localeDefaults = {\n            rendererOptions: {localeStrings},\n            localeStrings\n        };\n\n        const existingOpts = this.data(\"pivotUIOptions\");\n        if ((existingOpts == null) || overwrite) {\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n        } else {\n            opts = existingOpts;\n        }\n\n        try {\n            // do a first pass on the data to cache a materialized copy of any\n            // function-valued inputs and to compute dimension cardinalities\n            let attr, i, unusedAttrsVerticalAutoCutoff, x;\n            const attrValues = {};\n            const materializedInput = [];\n            let recordsProcessed = 0;\n            PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n                let attr;\n                if (!opts.filter(record)) { return; }\n                materializedInput.push(record);\n                for (attr of Object.keys(record || {})) {\n                    if ((attrValues[attr] == null)) {\n                        attrValues[attr] = {};\n                        if (recordsProcessed > 0) {\n                            attrValues[attr][\"null\"] = recordsProcessed;\n                        }\n                    }\n                }\n                for (attr in attrValues) {\n                    const value = record[attr] != null ? record[attr] : \"null\";\n                    if (attrValues[attr][value] == null) { attrValues[attr][value] = 0; }\n                    attrValues[attr][value]++;\n                }\n                return recordsProcessed++;\n            });\n\n            //start building the output\n            const uiTable = $(\"<table>\", {\"class\": \"pvtUi\"}).attr(\"cellpadding\", 5);\n\n            //renderer control\n            const rendererControl = $(\"<td>\").addClass(\"pvtUiCell\");\n\n            const renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind(\"change\", () => refresh()); //capture reference\n            for (x of Object.keys(opts.renderers || {})) {\n                $(\"<option>\").val(x).html(x).appendTo(renderer);\n            }\n\n\n            //axis list, including the double-click menu\n            const unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused pvtUiCell');\n            const shownAttributes = ((() => {\n                const result = [];\n                for (a in attrValues) {\n                    if (!Array.from(opts.hiddenAttributes).includes(a)) {\n                        result.push(a);\n                    }\n                }\n                return result;\n            })());\n            const shownInAggregators = ((() => {\n                const result1 = [];\n                for (c of Array.from(shownAttributes)) {                     if (!Array.from(opts.hiddenFromAggregators).includes(c)) {\n                        result1.push(c);\n                    }\n                }\n                return result1;\n            })());\n            const shownInDragDrop = ((() => {\n                const result2 = [];\n                for (c of Array.from(shownAttributes)) {                     if (!Array.from(opts.hiddenFromDragDrop).includes(c)) {\n                        result2.push(c);\n                    }\n                }\n                return result2;\n            })());\n\n\n            let unusedAttrsVerticalAutoOverride = false;\n            if (opts.unusedAttrsVertical === \"auto\") {\n                unusedAttrsVerticalAutoCutoff = 120; // legacy support\n            } else {\n                unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n            }\n\n            if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n                let attrLength = 0;\n                for (a of Array.from(shownInDragDrop)) { attrLength += a.length; }\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n            }\n\n            if ((opts.unusedAttrsVertical === true) || unusedAttrsVerticalAutoOverride) {\n                unused.addClass('pvtVertList');\n            } else {\n                unused.addClass('pvtHorizList');\n            }\n\n            for (i of Object.keys(shownInDragDrop || {})) {\n                attr = shownInDragDrop[i];\n                (function(attr) {\n                    let v;\n                    const values = ((() => {\n                        const result3 = [];\n                        for (v in attrValues[attr]) {\n                            result3.push(v);\n                        }\n                        return result3;\n                    })());\n                    let hasExcludedItem = false;\n                    const valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n\n                    valueList.append($(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(`(${values.length})`)\n                        )\n                    );\n                    if (values.length > opts.menuLimit) {\n                        valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n                    } else {\n                        if (values.length > 5) {\n                            const controls = $(\"<p>\").appendTo(valueList);\n                            const sorter = getSort(opts.sorters, attr);\n                            const placeholder = opts.localeStrings.filterResults;\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder, class: \"pvtSearch\"})\n                                .bind(\"keyup\", function() {\n                                    const filter = $(this).val().toLowerCase().trim();\n                                    const accept_gen = (prefix, accepted) => (function(v) {\n                                        let needle;\n                                        const real_filter = filter.substring(prefix.length).trim();\n                                        if (real_filter.length === 0) { return true; }\n                                        return (needle = Math.sign(sorter(v.toLowerCase(), real_filter)), Array.from(accepted).includes(needle));\n                                    });\n                                    const accept =\n                                        filter.indexOf(\">=\") === 0 ? accept_gen(\">=\", [1,0])\n                                        : filter.indexOf(\"<=\") === 0 ? accept_gen(\"<=\", [-1,0])\n                                        : filter.indexOf(\">\") === 0  ? accept_gen(\">\",  [1])\n                                        : filter.indexOf(\"<\") === 0  ? accept_gen(\"<\",  [-1])\n                                        : filter.indexOf(\"~\") === 0  ? function(v) {\n                                                if (filter.substring(1).trim().length === 0) { return true; }\n                                                return v.toLowerCase().match(filter.substring(1));\n                                            }\n                                        : v => v.toLowerCase().indexOf(filter) !== -1;\n\n                                    return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                                        if (accept($(this).text())) {\n                                            return $(this).parent().parent().show();\n                                        } else {\n                                            return $(this).parent().parent().hide();\n                                        }\n                                    });\n                            });\n                            controls.append($(\"<br>\"));\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind(\"click\", function() {\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\");\n                                    return false;\n                            });\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind(\"click\", function() {\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\");\n                                    return false;\n                            });\n                        }\n\n                        const checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n\n                        for (let value of Array.from(values.sort(getSort(opts.sorters, attr)))) {\n                             const valueCount = attrValues[attr][value];\n                             const filterItem = $(\"<label>\");\n                             let filterItemExcluded = false;\n                             if (opts.inclusions[attr]) {\n                                filterItemExcluded = (!Array.from(opts.inclusions[attr]).includes(value));\n                             } else if (opts.exclusions[attr]) {\n                                filterItemExcluded = (Array.from(opts.exclusions[attr]).includes(value));\n                           }\n                             if (!hasExcludedItem) { hasExcludedItem = filterItemExcluded; }\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind(\"change\", function() { return $(this).toggleClass(\"changed\"); });\n                             filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n                             filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\"));\n                             checkContainer.append($(\"<p>\").append(filterItem));\n                        }\n                    }\n\n                    const closeFilterBox = function() {\n                        if (valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length) {\n                                attrElem.addClass(\"pvtFilteredAttribute\");\n                            } else {\n                                attrElem.removeClass(\"pvtFilteredAttribute\");\n                            }\n\n                        valueList.find('.pvtSearch').val('');\n                        valueList.find('.pvtCheckContainer p').show();\n                        return valueList.hide();\n                    };\n\n                    const finalButtons = $(\"<p>\").appendTo(valueList);\n\n                    if (values.length <= opts.menuLimit) {\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\n                            .appendTo(finalButtons).bind(\"click\", function() {\n                                if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                                    refresh();\n                                }\n                                return closeFilterBox();\n                        });\n                    }\n\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\n                        .appendTo(finalButtons).bind(\"click\", function() {\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false);\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true);\n                            return closeFilterBox();\n                    });\n\n                    const triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind(\"click\", function(e) {\n                            const {left, top} = $(e.currentTarget).position();\n                            return valueList.css({left: left+10, top: top+10}).show();\n                    });\n\n                    var attrElem = $(\"<li>\").addClass(`axis_${i}`)\n                        .append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n\n                    if (hasExcludedItem) { attrElem.addClass('pvtFilteredAttribute'); }\n                    return unused.append(attrElem).append(valueList);\n                })(attr);\n            }\n\n            const tr1 = $(\"<tr>\").appendTo(uiTable);\n\n            //aggregator menu and value area\n\n            const aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind(\"change\", () => refresh()); //capture reference\n            for (x of Object.keys(opts.aggregators || {})) {\n                aggregator.append($(\"<option>\").val(x).html(x));\n            }\n\n            const ordering = {\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"},\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"},\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\n            };\n\n            const rowOrderArrow = $(\"<a>\", {role: \"button\"}).addClass(\"pvtRowOrder\")\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\n                .bind(\"click\", function() {\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol);\n                    return refresh();\n            });\n\n            const colOrderArrow = $(\"<a>\", {role: \"button\"}).addClass(\"pvtColOrder\")\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\n                .bind(\"click\", function() {\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol);\n                    return refresh();\n            });\n\n            $(\"<td>\").addClass('pvtVals pvtUiCell')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append(rowOrderArrow)\n              .append(colOrderArrow)\n              .append($(\"<br>\"));\n\n            //column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols pvtUiCell').appendTo(tr1);\n\n            const tr2 = $(\"<tr>\").appendTo(uiTable);\n\n            //row axes\n            tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows pvtUiCell').attr(\"valign\", \"top\"));\n\n            //the actual pivot table container\n            const pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2);\n\n            //finally the renderer dropdown and unused attribs are inserted at the requested location\n            if ((opts.unusedAttrsVertical === true) || unusedAttrsVerticalAutoOverride) {\n                uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n                uiTable.find('tr:nth-child(2)').prepend(unused);\n            } else {\n                uiTable.prepend($(\"<tr>\").append(rendererControl).append(unused));\n            }\n\n            //render the UI in its default state\n            this.html(uiTable);\n\n            //set up the UI initial state as requested by moving elements around\n\n            for (x of Array.from(opts.cols)) {\n                this.find(\".pvtCols\").append(this.find(`.axis_${$.inArray(x, shownInDragDrop)}`));\n            }\n            for (x of Array.from(opts.rows)) {\n                this.find(\".pvtRows\").append(this.find(`.axis_${$.inArray(x, shownInDragDrop)}`));\n            }\n            if (opts.aggregatorName != null) {\n                this.find(\".pvtAggregator\").val(opts.aggregatorName);\n            }\n            if (opts.rendererName != null) {\n                this.find(\".pvtRenderer\").val(opts.rendererName);\n            }\n\n            if (!opts.showUI) { this.find(\".pvtUiCell\").hide(); }\n\n            let initialRender = true;\n\n            //set up for refreshing\n            const refreshDelayed = () => {\n                let left;\n                const subopts = {\n                    derivedAttributes: opts.derivedAttributes,\n                    localeStrings: opts.localeStrings,\n                    rendererOptions: opts.rendererOptions,\n                    sorters: opts.sorters,\n                    cols: [], rows: [],\n                    dataClass: opts.dataClass\n                };\n\n                let numInputsToProcess = (left = opts.aggregators[aggregator.val()]([])().numInputs) != null ? left : 0;\n                let vals = [];\n                this.find(\".pvtRows li span.pvtAttr\").each(function() { return subopts.rows.push($(this).data(\"attrName\")); });\n                this.find(\".pvtCols li span.pvtAttr\").each(function() { return subopts.cols.push($(this).data(\"attrName\")); });\n                this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                    if (numInputsToProcess === 0) {\n                        return $(this).remove();\n                    } else {\n                        numInputsToProcess--;\n                        if ($(this).val() !== \"\") { return vals.push($(this).val()); }\n                    }\n                });\n\n                if (numInputsToProcess !== 0) {\n                    let asc, end;\n                    const pvtVals = this.find(\".pvtVals\");\n                    for (x = 0, end = numInputsToProcess, asc = 0 <= end; asc ? x < end : x > end; asc ? x++ : x--) {\n                        const newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind(\"change\", () => refresh());\n                        for (attr of Array.from(shownInAggregators)) {\n                            newDropdown.append($(\"<option>\").val(attr).text(attr));\n                        }\n                        pvtVals.append(newDropdown);\n                    }\n                }\n\n                if (initialRender) {\n                    ({\n                        vals\n                    } = opts);\n                    i = 0;\n                    this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                        $(this).val(vals[i]);\n                        return i++;\n                    });\n                    initialRender = false;\n                }\n\n                subopts.aggregatorName = aggregator.val();\n                subopts.vals = vals;\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n                subopts.renderer = opts.renderers[renderer.val()];\n                subopts.rowOrder = rowOrderArrow.data(\"order\");\n                subopts.colOrder = colOrderArrow.data(\"order\");\n                //construct filter here\n                const exclusions = {};\n                this.find('input.pvtFilter').not(':checked').each(function() {\n                    const filter = $(this).data(\"filter\");\n                    if (exclusions[filter[0]] != null) {\n                        return exclusions[filter[0]].push( filter[1] );\n                    } else {\n                        return exclusions[filter[0]] = [ filter[1] ];\n                    }});\n                //include inclusions when exclusions present\n                const inclusions = {};\n                this.find('input.pvtFilter:checked').each(function() {\n                    const filter = $(this).data(\"filter\");\n                    if (exclusions[filter[0]] != null) {\n                        if (inclusions[filter[0]] != null) {\n                            return inclusions[filter[0]].push( filter[1] );\n                        } else {\n                            return inclusions[filter[0]] = [ filter[1] ];\n                        }\n                    }});\n\n                subopts.filter = function(record) {\n                    if (!opts.filter(record)) { return false; }\n                    for (let k in exclusions) {\n                        const excludedItems = exclusions[k];\n                        if (Array.from(excludedItems).includes(\"\"+(record[k] != null ? record[k] : 'null'))) { return false; }\n                    }\n                    return true;\n                };\n\n                let updatedInputPromise;\n\n                if (!!opts.updateDataCallback)\n                    // updateDataCallback will return Promise that returns data\n                    updatedInputPromise = opts.updateDataCallback(subopts);\n\n                if (!updatedInputPromise) {\n                    updatedInputPromise = new Promise((resolve, reject) => {\n                       resolve(null);\n                    });\n                }\n\n                updatedInputPromise.then(\n                    (value) => {\n                        if (!!value) {\n                            // We got new data\n                            // Update materializedValues and apply filter\n                            materializedInput.length = 0;\n                            PivotData.forEachRecord(value, opts.derivedAttributes, function(record) {\n                                let attr;\n                                if (!opts.filter(record)) { return; }\n                                materializedInput.push(record);\n                            });\n                        }\n\n                        pivotTable.pivot(materializedInput,subopts);\n                        const pivotUIOptions = $.extend({}, opts, {\n                            cols: subopts.cols,\n                            rows: subopts.rows,\n                            colOrder: subopts.colOrder,\n                            rowOrder: subopts.rowOrder,\n                            vals,\n                            exclusions,\n                            inclusions,\n                            inclusionsInfo: inclusions, //duplicated for backwards-compatibility\n                            aggregatorName: aggregator.val(),\n                            rendererName: renderer.val()\n                        }\n                        );\n\n                        this.data(\"pivotUIOptions\", pivotUIOptions);\n\n                        // if requested make sure unused columns are in alphabetical order\n                        if (opts.autoSortUnusedAttrs) {\n                            const unusedAttrsContainer = this.find(\"td.pvtUnused.pvtAxisContainer\");\n                            $(unusedAttrsContainer).children(\"li\")\n                                .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                                .appendTo(unusedAttrsContainer);\n                        }\n\n                        pivotTable.css(\"opacity\", 1);\n                        if (opts.onRefresh != null) { return opts.onRefresh(pivotUIOptions); }\n                    },\n\n                    function (error) {\n                        // FIXME: Process error state somehow\n                    }\n                );\n\n                        /*\n                         */\n\n            };\n\n            var refresh = () => {\n                pivotTable.css(\"opacity\", 0.5);\n                return setTimeout(refreshDelayed, 10);\n            };\n\n            //the very first refresh will actually display the table\n            refresh();\n\n            this.find(\".pvtAxisContainer\").sortable({\n                    update(e, ui) { if ((ui.sender == null)) { return refresh(); } },\n                    connectWith: this.find(\".pvtAxisContainer\"),\n                    items: 'li',\n                    placeholder: 'pvtPlaceholder'\n            });\n        } catch (error) {\n            const e = error;\n            if (typeof console !== 'undefined' && console !== null) { console.error(e.stack); }\n            this.html(opts.localeStrings.uiRenderError);\n        }\n        return this;\n    };\n\n    /*\n    Heatmap post-processing\n    */\n\n    $.fn.heatmap = function(scope, opts) {\n        if (scope == null) { scope = \"heatmap\"; }\n        const numRows = this.data(\"numrows\");\n        const numCols = this.data(\"numcols\");\n\n        // given a series of values\n        // must return a function to map a given value to a CSS color\n        let colorScaleGenerator = __guard__(opts != null ? opts.heatmap : undefined, x => x.colorScaleGenerator);\n        if (colorScaleGenerator == null) { colorScaleGenerator = function(values) {\n            const min = Math.min(...Array.from(values || []));\n            const max = Math.max(...Array.from(values || []));\n            return function(x) {\n                const nonRed = 255 - Math.round((255*(x-min))/(max-min));\n                return `rgb(255,${nonRed},${nonRed})`;\n            };\n        }; }\n\n        const heatmapper = scope => {\n            const forEachCell = f => {\n                return this.find(scope).each(function() {\n                    const x = $(this).data(\"value\");\n                    if ((x != null) && isFinite(x)) { return f(x, $(this)); }\n                });\n            };\n\n            const values = [];\n            forEachCell(x => values.push(x));\n            const colorScale = colorScaleGenerator(values);\n            return forEachCell((x, elem) => elem.css(\"background-color\", colorScale(x)));\n        };\n\n        switch (scope) {\n            case \"heatmap\":    heatmapper(\".pvtVal\"); break;\n            case \"rowheatmap\": for (let i = 0, end = numRows, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) { heatmapper(`.pvtVal.row${i}`); } break;\n            case \"colheatmap\": for (let j = 0, end1 = numCols, asc1 = 0 <= end1; asc1 ? j < end1 : j > end1; asc1 ? j++ : j--) { heatmapper(`.pvtVal.col${j}`); } break;\n        }\n\n        heatmapper(\".pvtTotal.rowTotal\");\n        heatmapper(\".pvtTotal.colTotal\");\n\n        return this;\n    };\n\n    /*\n    Barchart post-processing\n    */\n\n    return $.fn.barchart = function(opts) {\n        const numRows = this.data(\"numrows\");\n        const numCols = this.data(\"numcols\");\n\n        const barcharter = scope => {\n            const forEachCell = f => {\n                return this.find(scope).each(function() {\n                    const x = $(this).data(\"value\");\n                    if ((x != null) && isFinite(x)) { return f(x, $(this)); }\n                });\n            };\n\n            const values = [];\n            forEachCell(x => values.push(x));\n            let max = Math.max(...Array.from(values || []));\n            if (max < 0) {\n                max = 0;\n            }\n            let range = max;\n            const min = Math.min(...Array.from(values || []));\n            if (min < 0) {\n                range = max - min;\n            }\n            const scaler = x => (100*x)/(1.4*range);\n            return forEachCell(function(x, elem) {\n                const text = elem.text();\n                const wrapper = $(\"<div>\").css({\n                    \"position\": \"relative\",\n                    \"height\": \"55px\"\n                });\n                let bgColor = \"gray\";\n                let bBase = 0;\n                if (min < 0) {\n                    bBase = scaler(-min);\n                }\n                if (x < 0) {\n                    bBase += scaler(x);\n                    bgColor = \"darkred\";\n                    x = -x;\n                }\n                wrapper.append($(\"<div>\").css({\n                    \"position\": \"absolute\",\n                    \"bottom\": bBase + \"%\",\n                    \"left\": 0,\n                    \"right\": 0,\n                    \"height\": scaler(x) + \"%\",\n                    \"background-color\": bgColor\n                })\n                );\n                wrapper.append($(\"<div>\").text(text).css({\n                    \"position\":\"relative\",\n                    \"padding-left\":\"5px\",\n                    \"padding-right\":\"5px\"\n                })\n                );\n\n                return elem.css({\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\"}).html(wrapper);\n            });\n        };\n\n        for (let i = 0, end = numRows, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--) { barcharter(`.pvtVal.row${i}`); }\n        barcharter(\".pvtTotal.colTotal\");\n\n        return this;\n    };\n});\n\nfunction __guard__(value, transform) {\n  return (typeof value !== 'undefined' && value !== null) ? transform(value) : undefined;\n}\n"],"file":"pivot.js"}