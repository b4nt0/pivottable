{"version":3,"names":[],"mappings":"","sources":["pivot.pt.js"],"sourcesContent":["/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nconst callWithJQuery = function(pivotModule) {\n    if ((typeof exports === \"object\") && (typeof module === \"object\")) { // CommonJS\n        return pivotModule(require(\"jquery\"));\n    } else if ((typeof define === \"function\") && define.amd) { // AMD\n        return define([\"jquery\"], pivotModule);\n    // Plain browser env\n    } else {\n        return pivotModule(jQuery);\n    }\n};\n        \ncallWithJQuery(function($) {\n    const nf = $.pivotUtilities.numberFormat;\n    const tpl = $.pivotUtilities.aggregatorTemplates;\n    const r = $.pivotUtilities.renderers;\n    const gcr = $.pivotUtilities.gchart_renderers;\n    const d3r = $.pivotUtilities.d3_renderers;\n    const c3r = $.pivotUtilities.c3_renderers;\n\n    const frFmt =    nf({thousandsSep: \".\", decimalSep: \",\"});\n    const frFmtInt = nf({digitsAfterDecimal: 0, thousandsSep: \".\", decimalSep: \",\"});\n    const frFmtPct = nf({digitsAfterDecimal: 2, scaler: 100, suffix: \"%\", thousandsSep: \".\", decimalSep: \",\"});\n\n    $.pivotUtilities.locales.pt = { \n\n        localeStrings: {\n            renderError: \"Ocorreu um error ao renderizar os resultados da Tabela Dinâmica.\",\n            computeError: \"Ocorreu um error ao computar os resultados da Tabela Dinâmica.\",\n            uiRenderError: \"Ocorreu um error ao renderizar a interface da Tabela Dinâmica.\",\n            selectAll: \"Selecionar Tudo\",\n            selectNone: \"Selecionar Nenhum\",\n            tooMany: \"(demais para listar)\",\n            filterResults: \"Filtrar resultados\",\n            totals: \"Totais\",\n            apply:\"Aplicar\",\n            cancel: \"Cancelar\",\n            vs: \"vs\",\n            by: \"por\"\n        },\n\n        aggregators: {\n            \"Contagem\":                                     tpl.count(frFmtInt),\n            \"Contagem de Valores únicos\":            tpl.countUnique(frFmtInt),\n            \"Lista de Valores únicos\":               tpl.listUnique(\", \"),\n            \"Soma\":                                         tpl.sum(frFmt),\n            \"Soma de Inteiros\":                             tpl.sum(frFmtInt),\n            \"Média\":                                        tpl.average(frFmt),\n            \"Mediana\":                                      tpl.median(frFmt),\n            \"Variancia\":                                    tpl.var(1, frFmt),\n            \"Desvio Padrão da Amostra\":                     tpl.stdev(1, frFmt),\n            \"Mínimo\":                                       tpl.min(frFmt),\n            \"Máximo\":                                       tpl.max(frFmt),\n            \"Primeiro\":                                     tpl.first(frFmt),\n            \"Último\":                                       tpl.last(frFmt),\n            \"Soma sobre Soma\":                              tpl.sumOverSum(frFmt),\n            \"Limite Superior a 80%\":                        tpl.sumOverSumBound80(true, frFmt),\n            \"Limite Inferior a 80%\":                        tpl.sumOverSumBound80(false, frFmt),\n            \"Soma como Fração do Total\":      tpl.fractionOf(tpl.sum(),   \"total\", frFmtPct),\n            \"Soma como Fração da Linha\":      tpl.fractionOf(tpl.sum(),   \"row\",   frFmtPct),\n            \"Soma como Fração da Coluna\":     tpl.fractionOf(tpl.sum(),   \"col\",   frFmtPct),\n            \"Contagem como Fração do Total\":  tpl.fractionOf(tpl.count(), \"total\", frFmtPct),\n            \"Contagem como Fração da Linha\":  tpl.fractionOf(tpl.count(), \"row\",   frFmtPct),\n            \"Contagem como Fração da Coluna\": tpl.fractionOf(tpl.count(), \"col\",   frFmtPct)\n        },\n\n        renderers: {\n            \"Tabela\":                    r[\"Table\"],\n            \"Tabela com Barras\":         r[\"Table Barchart\"],\n            \"Mapa de Calor\":             r[\"Heatmap\"],\n            \"Mapa de Calor por Linhas\":  r[\"Row Heatmap\"],\n            \"Mapa de Calor por Colunas\": r[\"Col Heatmap\"]\n        }\n    };\n\n    if (gcr) {\n        $.pivotUtilities.locales.pt.gchart_renderers = {\n            \"Gráfico de Linhas\":            gcr[\"Line Chart\"],\n            \"Gráfico de Barras\":            gcr[\"Bar Chart\"],\n            \"Gráfico de Barras Empilhadas\": gcr[\"Stacked Bar Chart\"],\n            \"Gráfico de Área\":       gcr[\"Area Chart\"]\n        };\n    }\n\n    if (d3r) {\n        $.pivotUtilities.locales.pt.d3_renderers =\n            {\"Mapa de Árvore\": d3r[\"Treemap\"]};\n    }\n\n    if (c3r) {\n      $.pivotUtilities.locales.pt.c3_renderers = {\n        \"Gráfico de Linhas\": c3r[\"Line Chart\"],\n        \"Gráfico de Barras\": c3r[\"Bar Chart\"],\n        \"Gráfico de Barras Empilhadas\": c3r[\"Stacked Bar Chart\"],\n        \"Gráfico de Área\":       c3r[\"Area Chart\"]\n    };\n  }\n\n    return $.pivotUtilities.locales.pt;\n});\n"],"file":"pivot.pt.js"}