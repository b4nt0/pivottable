{"version":3,"names":[],"mappings":"","sources":["plotly_renderers.js"],"sourcesContent":["/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nconst callWithJQuery = function(pivotModule) {\n    if ((typeof exports === \"object\") && (typeof module === \"object\")) { // CommonJS\n        return pivotModule(require(\"jquery\"), require(\"plotly.js\"));\n    } else if ((typeof define === \"function\") && define.amd) { // AMD\n        return define([\"jquery\", \"plotly.js\"], pivotModule);\n    // Plain browser env\n    } else {\n        return pivotModule(jQuery, Plotly);\n    }\n};\n\ncallWithJQuery(function($, Plotly) {\n\n    const makePlotlyChart = function(traceOptions, layoutOptions, transpose) {\n        if (traceOptions == null) { traceOptions = {}; }\n        if (layoutOptions == null) { layoutOptions = {}; }\n        if (transpose == null) { transpose = false; }\n        return function(pivotData, opts) {\n            let groupByTitle, hAxisTitle;\n            const defaults = {\n                localeStrings: {vs: \"vs\", by: \"by\"},\n                plotly: {},\n                plotlyConfig: {}\n            };\n\n            opts = $.extend(true, {}, defaults, opts);\n\n            const rowKeys = pivotData.getRowKeys();\n            const colKeys = pivotData.getColKeys();\n            const traceKeys = transpose ? colKeys : rowKeys;\n            if (traceKeys.length === 0) { traceKeys.push([]); }\n            const datumKeys = transpose ? rowKeys : colKeys;\n            if (datumKeys.length === 0) { datumKeys.push([]); }\n\n            let fullAggName = pivotData.aggregatorName;\n            if (pivotData.valAttrs.length) {\n                fullAggName += `(${pivotData.valAttrs.join(\", \")})`;\n            }\n\n            const data = traceKeys.map(function(traceKey) {\n                const values = [];\n                const labels = [];\n                for (let datumKey of Array.from(datumKeys)) {\n                    const val = parseFloat(pivotData.getAggregator(\n                        transpose ? datumKey : traceKey,\n                        transpose ? traceKey : datumKey\n                    ).value());\n                    values.push(isFinite(val) ? val : null);\n                    labels.push(datumKey.join('-') || ' ');\n                }\n\n                const trace = {name: traceKey.join('-') || fullAggName};\n                if (traceOptions.type === \"pie\") {\n                    trace.values = values;\n                    trace.labels = labels.length > 1 ? labels : [fullAggName];\n                } else {\n                    trace.x = transpose ? values : labels;\n                    trace.y = transpose ? labels : values;\n                }\n                return $.extend(trace, traceOptions);\n            });\n\n            if (transpose) {\n                hAxisTitle = pivotData.rowAttrs.join(\"-\");\n                groupByTitle = pivotData.colAttrs.join(\"-\");\n            } else {\n                hAxisTitle = pivotData.colAttrs.join(\"-\");\n                groupByTitle = pivotData.rowAttrs.join(\"-\");\n            }\n            let titleText = fullAggName;\n            if (hAxisTitle !== \"\") { titleText += ` ${opts.localeStrings.vs} ${hAxisTitle}`; }\n            if (groupByTitle !== \"\") { titleText += ` ${opts.localeStrings.by} ${groupByTitle}`; }\n\n            const layout = {\n                title: titleText,\n                hovermode: 'closest',\n                width: window.innerWidth / 1.4,\n                height: (window.innerHeight / 1.4) - 50\n            };\n\n            if (traceOptions.type === 'pie') {\n                const columns = Math.ceil(Math.sqrt(data.length));\n                const rows = Math.ceil(data.length / columns);\n                layout.grid = {columns, rows};\n                for (let i in data) {\n                    const d = data[i];\n                    d.domain = {\n                        row: Math.floor(i / columns),\n                        column: i - (columns * Math.floor(i / columns)),\n                    };\n                    if (data.length > 1) {\n                        d.title = d.name;\n                    }\n                }\n                if (data[0].labels.length === 1) { layout.showlegend = false; }\n            } else {\n                layout.xaxis = {\n                    title: transpose ? fullAggName : null,\n                    automargin: true\n                };\n                layout.yaxis = {\n                    title: transpose ? null : fullAggName,\n                    automargin: true\n                };\n            }\n\n\n            const result = $(\"<div>\").appendTo($(\"body\"));\n            Plotly.newPlot(result[0], data, $.extend(layout, layoutOptions, opts.plotly), opts.plotlyConfig);\n            return result.detach();\n        };\n    };\n\n    const makePlotlyScatterChart = () => (function(pivotData, opts) {\n        const defaults = {\n            localeStrings: {vs: \"vs\", by: \"by\"},\n            plotly: {},\n            plotlyConfig: {}\n        };\n\n        opts = $.extend(true, {}, defaults, opts);\n\n        const rowKeys = pivotData.getRowKeys();\n        if (rowKeys.length === 0) { rowKeys.push([]); }\n        const colKeys = pivotData.getColKeys();\n        if (colKeys.length === 0) { colKeys.push([]); }\n\n        const data = {x: [], y: [], text: [], type: 'scatter', mode: 'markers'};\n\n        for (let rowKey of Array.from(rowKeys)) {\n            for (let colKey of Array.from(colKeys)) {\n                const v = pivotData.getAggregator(rowKey, colKey).value();\n                if (v != null) {\n                    data.x.push(colKey.join('-'));\n                    data.y.push(rowKey.join('-'));\n                    data.text.push(v);\n                }\n            }\n        }\n\n        const layout = {\n            title: pivotData.rowAttrs.join(\"-\") + ' vs ' + pivotData.colAttrs.join(\"-\"),\n            hovermode: 'closest',\n            xaxis: {title: pivotData.colAttrs.join('-'), automargin: true},\n            yaxis: {title: pivotData.rowAttrs.join('-'), automargin: true},\n            width: window.innerWidth / 1.5,\n            height: (window.innerHeight / 1.4) - 50\n        };\n\n        const renderArea = $(\"<div>\", {style: \"display:none;\"}).appendTo($(\"body\"));\n        const result = $(\"<div>\").appendTo(renderArea);\n        Plotly.newPlot(result[0], [data], $.extend(layout, opts.plotly), opts.plotlyConfig);\n        result.detach();\n        renderArea.remove();\n        return result;\n    });\n\n    return $.pivotUtilities.plotly_renderers = {\n        \"Horizontal Bar Chart\": makePlotlyChart({type: 'bar', orientation: 'h'},\n            {barmode: 'group'}, true),\n        \"Horizontal Stacked Bar Chart\": makePlotlyChart({type: 'bar', orientation: 'h'},\n            {barmode: 'relative'}, true),\n        \"Bar Chart\": makePlotlyChart({type: 'bar'}, {barmode: 'group'}),\n        \"Stacked Bar Chart\": makePlotlyChart({type: 'bar'}, {barmode: 'relative'}),\n        \"Line Chart\": makePlotlyChart(),\n        \"Area Chart\": makePlotlyChart({stackgroup: 1}),\n        \"Scatter Chart\": makePlotlyScatterChart(),\n        'Multiple Pie Chart': makePlotlyChart(\n            {type: 'pie', scalegroup: 1, hoverinfo: 'label+value', textinfo: 'none'},\n            {}, true)\n    };\n});\n"],"file":"plotly_renderers.js"}