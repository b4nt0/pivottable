{"version":3,"names":[],"mappings":"","sources":["pivot_spec.js"],"sourcesContent":["/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nconst fixtureData = [\n    [\"name\",    \"gender\",   \"colour\",    \"birthday\",     \"trials\",   \"successes\"],\n    [\"Nick\",    \"male\",     \"blue\",      \"1982-11-07\",   103,        12],\n    [\"Jane\",    \"female\",   \"red\",       \"1982-11-08\",   95,         25],\n    [\"John\",    \"male\",     \"blue\",      \"1982-12-08\",   112,        30],\n    [\"Carol\",   \"female\",   \"yellow\",    \"1983-12-08\",   102,        14]\n];\n\nconst raggedFixtureData = [\n    {name: \"Nick\", \"colour\": \"red\", \"age\": 34},\n    {name: \"Jane\", \"gender\": \"female\"},\n    {name: \"John\", \"gender\": \"male\", \"age\": 12},\n    {name: \"Jim\", \"gender\": null, \"age\": 12}\n];\n\ndescribe(\"$.pivotUI()\", function() {\n    describe(\"with no rows/cols, default count aggregator, default TableRenderer\",  function() {\n        let table = null;\n\n        beforeEach(done => table = $(\"<div>\").pivotUI(fixtureData, {onRefresh: done}));\n        it(\"has all the basic UI elements\", function(done) {\n            expect(table.find(\"td.pvtAxisContainer\").length)\n            .toBe(3);\n            expect(table.find(\"td.pvtRendererArea\").length)\n            .toBe(1);\n            expect(table.find(\"td.pvtVals\").length)\n            .toBe(1);\n            expect(table.find(\"select.pvtRenderer\").length)\n            .toBe(1);\n            expect(table.find(\"select.pvtAggregator\").length)\n            .toBe(1);\n            expect(table.find(\"span.pvtAttr\").length)\n            .toBe(6);\n            return done();\n        });\n\n        it(\"reflects its inputs\", function(done) {\n            expect(table.find(\"td.pvtUnused span.pvtAttr\").length)\n            .toBe(6);\n            expect(table.find(\"select.pvtRenderer\").val())\n            .toBe(\"Table\");\n            expect(table.find(\"select.pvtAggregator\").val())\n            .toBe(\"Count\");\n            return done();\n        });\n\n        it(\"renders a table\", function(done) {\n            expect(table.find(\"table.pvtTable\").length)\n            .toBe(1);\n            return done();\n        });\n\n\n        return describe(\"its renderer output\", function() {\n            it(\"has the correct type and number of cells\", function(done) {\n                expect(table.find(\"th.pvtTotalLabel\").length)\n                .toBe(1);\n                expect(table.find(\"td.pvtGrandTotal\").length)\n                .toBe(1);\n                return done();\n            });\n\n            it(\"has the correct textual representation\", function(done) {\n                expect(table.find(\"table.pvtTable\").text())\n                .toBe([\"Totals\", \"4\"].join(\"\"));\n                return done();\n            });\n\n            return it(\"has a correct grand total with data value\", function(done) {\n                expect(table.find(\"td.pvtGrandTotal\").text())\n                .toBe(\"4\");\n                expect(table.find(\"td.pvtGrandTotal\").data(\"value\"))\n                .toBe(4);\n                return done();\n            });\n        });\n    });\n\n    describe(\"with rows/cols, sum-over-sum aggregator, Heatmap renderer\",  function() {\n        let table = null;\n\n        beforeEach(done => table = $(\"<div>\").pivotUI(fixtureData, {\n            rows: [\"gender\"], cols: [\"colour\"],\n            aggregatorName: \"Sum over Sum\",\n            vals: [\"successes\", \"trials\"],\n            rendererName: \"Heatmap\",\n            onRefresh: done\n        }\n        ));\n\n        it(\"has all the basic UI elements\", function(done) {\n            expect(table.find(\"td.pvtAxisContainer\").length)\n            .toBe(3);\n            expect(table.find(\"td.pvtRendererArea\").length)\n            .toBe(1);\n            expect(table.find(\"td.pvtVals\").length)\n            .toBe(1);\n            expect(table.find(\"select.pvtRenderer\").length)\n            .toBe(1);\n            expect(table.find(\"select.pvtAggregator\").length)\n            .toBe(1);\n            expect(table.find(\"span.pvtAttr\").length)\n            .toBe(6);\n            return done();\n        });\n\n        it(\"reflects its inputs\", function(done) {\n            expect(table.find(\"td.pvtUnused span.pvtAttr\").length)\n            .toBe(4);\n            expect(table.find(\"td.pvtRows span.pvtAttr\").length)\n            .toBe(1);\n            expect(table.find(\"td.pvtCols span.pvtAttr\").length)\n            .toBe(1);\n            expect(table.find(\"select.pvtRenderer\").val())\n            .toBe(\"Heatmap\");\n            expect(table.find(\"select.pvtAggregator\").val())\n            .toBe(\"Sum over Sum\");\n            return done();\n        });\n\n        it(\"renders a table\", function(done) {\n            expect(table.find(\"table.pvtTable\").length)\n            .toBe(1);\n            return done();\n        });\n\n        return describe(\"its renderer output\", function() {\n            it(\"has the correct type and number of cells\", function(done) {\n                expect(table.find(\"th.pvtAxisLabel\").length)\n                .toBe(2);\n                expect(table.find(\"th.pvtRowLabel\").length)\n                .toBe(2);\n                expect(table.find(\"th.pvtColLabel\").length)\n                .toBe(3);\n                expect(table.find(\"th.pvtTotalLabel\").length)\n                .toBe(2);\n                expect(table.find(\"td.pvtVal\").length)\n                .toBe(6);\n                expect(table.find(\"td.pvtTotal\").length)\n                .toBe(5);\n                expect(table.find(\"td.pvtGrandTotal\").length)\n                .toBe(1);\n                return done();\n            });\n\n            it(\"has the correct textual representation\", function(done) {\n                expect(table.find(\"table.pvtTable\").text())\n                .toBe([\n                    \"colour\",   \"blue\", \"red\",  \"yellow\",   \"Totals\",\n                    \"gender\",\n                    \"female\",           \"0.26\", \"0.14\",     \"0.20\",\n                    \"male\",     \"0.20\",                     \"0.20\",\n                    \"Totals\",   \"0.20\", \"0.26\", \"0.14\",     \"0.20\"\n                    ].join(\"\")\n                );\n                return done();\n            });\n\n            return it(\"has a correct spot-checked cell with data value\", function(done) {\n                expect(table.find(\"td.col0.row1\").text())\n                .toBe(\"0.20\");\n                expect(table.find(\"td.col0.row1\").data(\"value\"))\n                .toBe((12+30)/(103+112));\n                return done();\n            });\n        });\n    });\n\n    return describe(\"with ragged input\",  function() {\n        const table = $(\"<div>\").pivotUI(raggedFixtureData, {rows: [\"gender\"], cols: [\"age\"]});\n\n        return it(\"renders a table with the correct textual representation\", () => expect(table.find(\"table.pvtTable\").text())\n        .toBe([\n            \"age\",     \"12\",  \"34\",  \"null\",  \"Totals\",\n            \"gender\",\n            \"female\",                 \"1\",    \"1\",\n            \"male\",    \"1\",                   \"1\",\n            \"null\",    \"1\",    \"1\",           \"2\",\n            \"Totals\",  \"2\",    \"1\",   \"1\",    \"4\"\n            ].join(\"\")\n        ));\n    });\n});\n\ndescribe(\"$.pivot()\", function() {\n\n    describe(\"with no rows/cols, default count aggregator, default TableRenderer\",  function() {\n        const table = $(\"<div>\").pivot(fixtureData);\n\n        it(\"renders a table\", () => expect(table.find(\"table.pvtTable\").length)\n        .toBe(1));\n\n        return describe(\"its renderer output\", function() {\n\n            it(\"has the correct textual representation\", () => expect(table.find(\"table.pvtTable\").text())\n            .toBe([\"Totals\", \"4\"].join(\"\")));\n\n            return it(\"has a correct grand total with data value\", function() {\n                expect(table.find(\"td.pvtGrandTotal\").text())\n                .toBe(\"4\");\n                return expect(table.find(\"td.pvtGrandTotal\").data(\"value\"))\n                .toBe(4);\n            });\n        });\n    });\n\n    describe(\"with rows/cols, sum aggregator, derivedAttributes, filter and sorters\",  function() {\n        const {sortAs, derivers, aggregators} = $.pivotUtilities;\n        const table = $(\"<div>\").pivot(fixtureData, {\n            rows: [\"gender\"], cols: [\"birthyear\"], aggregator: aggregators[\"Sum\"]([\"trialbins\"]),\n            filter(record) { return record.name !== \"Nick\"; },\n            derivedAttributes: {\n                birthyear: derivers.dateFormat(\"birthday\", \"%y\"),\n                trialbins: derivers.bin(\"trials\", 10)\n            },\n            sorters(attr) {\n                if (attr === \"gender\") { return sortAs([\"male\", \"female\"]); }\n            }\n        }\n        );\n\n        return it(\"renders a table with the correct textual representation\", () => expect(table.find(\"table.pvtTable\").text())\n        .toBe([\n            \"birthyear\",    \"1982\",     \"1983\",     \"Totals\",\n            \"gender\",\n            \"male\",         \"110.00\",               \"110.00\",\n            \"female\",       \"90.00\",    \"100.00\",   \"190.00\",\n            \"Totals\",       \"200.00\",   \"100.00\",   \"300.00\"\n            ].join(\"\")\n        ));\n    });\n\n    describe(\"with rows/cols, fraction-of aggregator\",  function() {\n        const {aggregators} = $.pivotUtilities;\n        const table = $(\"<div>\").pivot(fixtureData, {\n            rows: [\"gender\"],\n            aggregator: aggregators[\"Sum as Fraction of Total\"]([\"trials\"])\n        }\n        );\n\n        return it(\"renders a table with the correct textual representation\", () => expect(table.find(\"table.pvtTable\").text())\n        .toBe([\n            \"gender\",  \"Totals\",\n            \"female\",  \"47.8%\",\n            \"male\",    \"52.2%\",\n            \"Totals\",  \"100.0%\"\n            ].join(\"\")\n        ));\n    });\n\n    describe(\"with rows/cols, custom aggregator, custom renderer with options\",  function() {\n        let received_PivotData = null;\n        let received_rendererOptions = null;\n\n        const table = $(\"<div>\").pivot(fixtureData, {\n            rows: [\"name\", \"colour\"], cols: [\"trials\", \"successes\"],\n            aggregator() {\n                return {\n                    count2x: 0,\n                    push() { return this.count2x +=2; },\n                    value() { return this.count2x; },\n                    format(x) { return \"formatted \" + x; }\n                };\n            },\n            renderer(a,b) {\n                received_PivotData = a;\n                received_rendererOptions = b;\n                return $(\"<div>\").addClass(b.greeting).text(\"world\");\n            },\n            rendererOptions: {greeting:\"hithere\"}\n        });\n\n        it(\"renders the custom renderer as per options\", () => expect(table.find(\"div.hithere\").length)\n        .toBe(1));\n\n        return describe(\"its received PivotData object\", () => it(\"has a correct grand total value and format for custom aggregator\", function() {\n            const agg = received_PivotData.getAggregator([],[]);\n            const val = agg.value();\n            expect(val).toBe(8);\n            return expect(agg.format(val)).toBe(\"formatted 8\");\n        }));\n    });\n\n\n    return describe(\"with ragged input\",  function() {\n        const table = $(\"<div>\").pivot(raggedFixtureData, {rows: [\"gender\"], cols: [\"age\"]});\n\n        return it(\"renders a table with the correct textual representation\", () => expect(table.find(\"table.pvtTable\").text())\n        .toBe([\n            \"age\",     \"12\",  \"34\",  \"null\",  \"Totals\",\n            \"gender\",\n            \"female\",                 \"1\",    \"1\",\n            \"male\",    \"1\",                   \"1\",\n            \"null\",    \"1\",    \"1\",           \"2\",\n            \"Totals\",  \"2\",    \"1\",   \"1\",    \"4\"\n            ].join(\"\")\n        ));\n    });\n});\n\ndescribe(\"$.pivotUtilities\", function() {\n\n    describe(\".PivotData()\", function() {\n        const sumOverSumOpts =\n            {aggregator: $.pivotUtilities.aggregators[\"Sum over Sum\"]([\"a\",\"b\"])};\n\n        describe(\"with no options\", function() {\n            const aoaInput =  [ [\"a\",\"b\"], [1,2], [3,4] ];\n            const pd = new $.pivotUtilities.PivotData(aoaInput);\n\n            return it(\"has the correct grand total value\", () => expect(pd.getAggregator([],[]).value())\n            .toBe(2));\n        });\n\n        describe(\"with array-of-array input\", function() {\n            const aoaInput =  [ [\"a\",\"b\"], [1,2], [3,4] ];\n            const pd = new $.pivotUtilities.PivotData(aoaInput, sumOverSumOpts);\n\n            return it(\"has the correct grand total value\", () => expect(pd.getAggregator([],[]).value())\n            .toBe((1+3)/(2+4)));\n        });\n\n        describe(\"with array-of-object input\", function() {\n            const aosInput =  [ {a:1, b:2}, {a:3, b:4} ];\n            const pd = new $.pivotUtilities.PivotData(aosInput, sumOverSumOpts);\n\n            return it(\"has the correct grand total value\", () => expect(pd.getAggregator([],[]).value())\n            .toBe((1+3)/(2+4)));\n        });\n\n        describe(\"with ragged array-of-object input\", function() {\n            const raggedAosInput =  [ {a:1}, {b:4}, {a: 3, b: 2} ];\n            const pd = new $.pivotUtilities.PivotData(raggedAosInput, sumOverSumOpts);\n\n            return it(\"has the correct grand total value\", () => expect(pd.getAggregator([],[]).value())\n            .toBe((1+3)/(2+4)));\n        });\n\n        describe(\"with function input\", function() {\n            const functionInput = function(record) {\n                record({a:1, b:2});\n                return record({a:3, b:4});\n            };\n            const pd = new $.pivotUtilities.PivotData(functionInput, sumOverSumOpts);\n\n            return it(\"has the correct grand total value\", () => expect(pd.getAggregator([],[]).value())\n            .toBe((1+3)/(2+4)));\n        });\n\n        describe(\"with jQuery table element input\", function() {\n            const tableInput = $(`\\\n<table>\n    <thead>\n        <tr> <th>a</th><th>b</th> </tr>\n    </thead>\n    <tbody>\n        <tr> <td>1</td> <td>2</td> </tr>\n        <tr> <td>3</td> <td>4</td> </tr>\n    </tbody>\n</table>\\\n`\n            );\n            const pd = new $.pivotUtilities.PivotData(tableInput, sumOverSumOpts);\n\n            return it(\"has the correct grand total value\", () => expect(pd.getAggregator([],[]).value())\n            .toBe((1+3)/(2+4)));\n        });\n\n\n        return describe(\"with rows/cols\", function() {\n            const pd = new $.pivotUtilities.PivotData(fixtureData, {\n                rows: [\"name\", \"colour\"],\n                cols: [\"trials\", \"successes\"]\n            });\n\n            it(\"has correctly-ordered row keys\", () => expect(pd.getRowKeys())\n            .toEqual([ [ 'Carol', 'yellow' ], [ 'Jane', 'red' ], [ 'John', 'blue' ], [ 'Nick', 'blue' ] ]));\n\n            it(\"has correctly-ordered col keys\", () => expect(pd.getColKeys())\n            .toEqual([ [ 95, 25 ], [ 102, 14 ], [ 103, 12 ], [ 112, 30 ] ]));\n\n            it(\"can be iterated over\", function() {\n                let numNotNull = 0;\n                let numNull = 0;\n                for (let r of Array.from(pd.getRowKeys())) {\n                    for (let c of Array.from(pd.getColKeys())) {\n                        if (pd.getAggregator(r, c).value() != null) {\n                            numNotNull++;\n                        } else {\n                            numNull++;\n                        }\n                    }\n                }\n                expect(numNotNull)\n                .toBe(4);\n                return expect(numNull)\n                .toBe(12);\n            });\n\n            it(\"returns matching records\", function() {\n                const records = [];\n                pd.forEachMatchingRecord({gender: \"male\"}, x => records.push(x.name));\n                return expect(records)\n                .toEqual([\"Nick\", \"John\"]);\n        });\n\n            it(\"has a correct spot-checked aggregator\", function() {\n                const agg = pd.getAggregator([ 'Carol', 'yellow' ],[ 102, 14 ]);\n                const val = agg.value();\n                expect(val).toBe(1);\n                return expect(agg.format(val)).toBe(\"1\");\n            });\n\n            return it(\"has a correct grand total aggregator\", function() {\n                const agg = pd.getAggregator([],[]);\n                const val = agg.value();\n                expect(val).toBe(4);\n                return expect(agg.format(val)).toBe(\"4\");\n            });\n        });\n    });\n\n    describe(\".aggregatorTemplates\", function() {\n\n        const getVal = function(aggregator) {\n            const pd = new $.pivotUtilities.PivotData(fixtureData, {aggregator});\n            return pd.getAggregator([],[]).value();\n        };\n        const tpl = $.pivotUtilities.aggregatorTemplates;\n\n        describe(\".count\", () => it(\"works\", () => expect(getVal(tpl.count()()))\n        .toBe(4)));\n\n        describe(\".countUnique\", () => it(\"works\", () => expect(getVal(tpl.countUnique()(['gender'])))\n        .toBe(2)));\n\n        describe(\".listUnique\", () => it(\"works\", () => expect(getVal(tpl.listUnique()(['gender'])))\n        .toBe('female,male')));\n\n        describe(\".average\", () => it(\"works\", () => expect(getVal(tpl.average()(['trials'])))\n        .toBe(103)));\n\n        describe(\".sum\", () => it(\"works\", () => expect(getVal(tpl.sum()(['trials'])))\n        .toBe(412)));\n\n        describe(\".min\", () => it(\"works\", () => expect(getVal(tpl.min()(['trials'])))\n        .toBe(95)));\n\n        describe(\".max\", () => it(\"works\", () => expect(getVal(tpl.max()(['trials'])))\n        .toBe(112)));\n\n        describe(\".first\", () => it(\"works\", () => expect(getVal(tpl.first()(['name'])))\n        .toBe('Carol')));\n\n        describe(\".last\", () => it(\"works\", () => expect(getVal(tpl.last()(['name'])))\n        .toBe('Nick')));\n\n        describe(\".average\", () => it(\"works\", () => expect(getVal(tpl.average()(['trials'])))\n        .toBe(103)));\n\n        describe(\".median\", () => it(\"works\", () => expect(getVal(tpl.median()(['trials'])))\n        .toBe(102.5)));\n\n        describe(\".quantile\", () => it(\"works\", function() {\n            expect(getVal(tpl.quantile(0)(['trials'])))\n            .toBe(95);\n            expect(getVal(tpl.quantile(0.1)(['trials'])))\n            .toBe(98.5);\n            expect(getVal(tpl.quantile(0.25)(['trials'])))\n            .toBe(98.5);\n            expect(getVal(tpl.quantile(1/3)(['trials'])))\n            .toBe(102);\n            return expect(getVal(tpl.quantile(1)(['trials'])))\n            .toBe(112);\n        }));\n\n        describe(\".var\", () => it(\"works\", () => expect(getVal(tpl.var()(['trials'])))\n        .toBe(48.666666666666686)));\n\n        describe(\".stdev\", () => it(\"works\", () => expect(getVal(tpl.stdev()(['trials'])))\n        .toBe(6.976149845485451)));\n\n        return describe(\".sumOverSum\", () => it(\"works\", () => expect(getVal(tpl.sumOverSum()(['successes', 'trials'])))\n        .toBe((12+25+30+14)/(95+102+103+112))));\n    });\n\n    describe(\".naturalSort()\", function() {\n        const {\n            naturalSort\n        } = $.pivotUtilities;\n\n        const sortedArr = [\n            null, NaN,\n            -Infinity, '-Infinity', -3, '-3', -2, '-2', -1, '-1',\n            0, '2e-1', 1, '01', '1', 2, '002', '002e0', '02', '2', '2e-0',\n            3, 10, '10', '11', '12', '1e2', '112', Infinity, 'Infinity',\n            '1a', '2a','12a','20a',\n            'A', 'A', 'NaN', 'a', 'a',\n            'a01', 'a012', 'a02', 'a1', 'a2', 'a12', 'a12', 'a21', 'a21',\n            'b', 'c', 'd', 'null'\n        ];\n\n        return it(\"sorts naturally (null, NaN, numbers & numbery strings, Alphanum for text strings)\", () => expect(sortedArr.slice().sort(naturalSort))\n        .toEqual(sortedArr));\n    });\n\n    describe(\".sortAs()\", function() {\n        const {\n            sortAs\n        } = $.pivotUtilities;\n\n        it(\"sorts with unknown values sorted at the end\", () => expect([5,2,3,4,1].sort(sortAs([4,3,2])))\n        .toEqual([4,3,2,1,5]));\n\n        return it(\"sorts lowercase after uppercase\", () => expect([\"Ab\",\"aA\",\"aa\",\"ab\"].sort(sortAs([\"Ab\",\"Aa\"])))\n        .toEqual([\"Ab\",\"ab\",\"aa\",\"aA\"]));\n});\n\n    describe(\".numberFormat()\", function() {\n        const {\n            numberFormat\n        } = $.pivotUtilities;\n\n        it(\"formats numbers\", function() {\n            const nf = numberFormat();\n            return expect(nf(1234567.89123456))\n            .toEqual(\"1,234,567.89\");\n        });\n\n        it(\"formats booleans\", function() {\n            const nf = numberFormat();\n            return expect(nf(true))\n            .toEqual(\"1.00\");\n        });\n\n        it(\"formats numbers in strings\", function() {\n            const nf = numberFormat();\n            return expect(nf(\"1234567.89123456\"))\n            .toEqual(\"1,234,567.89\");\n        });\n\n        it(\"doesn't formats strings\", function() {\n            const nf = numberFormat();\n            return expect(nf(\"hi there\"))\n            .toEqual(\"\");\n        });\n\n        it(\"doesn't formats objects\", function() {\n            const nf = numberFormat();\n            return expect(nf({a:1}))\n            .toEqual(\"\");\n        });\n\n        it(\"formats percentages\", function() {\n            const nf = numberFormat({scaler: 100, suffix: \"%\"});\n            return expect(nf(0.12345))\n            .toEqual(\"12.35%\");\n        });\n\n        it(\"adds separators\", function() {\n            const nf = numberFormat({thousandsSep: \"a\", decimalSep: \"b\"});\n            return expect(nf(1234567.89123456))\n            .toEqual(\"1a234a567b89\");\n        });\n\n        it(\"adds prefixes and suffixes\", function() {\n            const nf = numberFormat({prefix: \"a\", suffix: \"b\"});\n            return expect(nf(1234567.89123456))\n            .toEqual(\"a1,234,567.89b\");\n        });\n\n        return it(\"scales and rounds\", function() {\n            const nf = numberFormat({digitsAfterDecimal: 3, scaler: 1000});\n            return expect(nf(1234567.89123456))\n            .toEqual(\"1,234,567,891.235\");\n        });\n    });\n\n    return describe(\".derivers\", function() {\n        describe(\".dateFormat()\", function() {\n            const df = $.pivotUtilities.derivers.dateFormat(\"x\", \"abc % %% %%% %a %y %m %n %d %w %x %H %M %S\", true);\n\n            it(\"formats date objects\", () => expect(df({x: new Date(\"2015-01-02T23:43:11Z\")}))\n            .toBe('abc % %% %%% %a 2015 01 Jan 02 Fri 5 23 43 11'));\n\n            return it(\"formats input parsed by Date.parse()\", function() {\n                expect(df({x: \"2015-01-02T23:43:11Z\"}))\n                .toBe('abc % %% %%% %a 2015 01 Jan 02 Fri 5 23 43 11');\n\n                return expect(df({x: \"bla\"}))\n                .toBe('');\n            });\n        });\n\n        return describe(\".bin()\", function() {\n            const binner = $.pivotUtilities.derivers.bin(\"x\", 10);\n\n            it(\"bins numbers\", function() {\n                expect(binner({x: 11}))\n                .toBe(10);\n\n                expect(binner({x: 9}))\n                .toBe(0);\n\n                return expect(binner({x: 111}))\n                .toBe(110);\n            });\n\n            it(\"bins booleans\", () => expect(binner({x: true}))\n            .toBe(0));\n\n            it(\"bins negative numbers\", () => expect(binner({x: -12}))\n            .toBe(-10));\n\n            it(\"doesn't bin strings\", () => expect(binner({x: \"a\"}))\n            .toBeNaN());\n\n            return it(\"doesn't bin objects\", () => expect(binner({x: {a:1}}))\n            .toBeNaN());\n        });\n    });\n});\n"],"file":"pivot_spec.js"}